/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>


/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 187
#define YY_END_OF_BUFFER 188
static yyconst short int yy_accept[733] =
    {   0,
        0,    0,  160,  160,    0,    0,    0,    0,  188,  187,
        2,    1,  128,  165,  187,  107,  116,  137,  138,  106,
      103,  104,  132,  105,  180,  180,  136,  120,  108,  121,
      187,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  139,  140,  118,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  141,  117,  142,  119,  103,
      104,  132,  180,  180,  186,  160,  161,  162,  166,  167,
      179,  187,    2,  125,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  113,  126,  112,  130,  109,  131,

      110,    0,  159,  164,  111,    0,  180,    0,    0,    0,
      114,  123,  122,  124,  115,  129,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,   46,  186,  186,  186,  186,  186,  186,   32,  186,
      186,  186,  186,  186,  186,  186,  186,  186,   37,  186,
       38,   48,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  127,    0,    0,
        0,    0,  184,    0,  180,    0,    0,    0,  186,  186,
      186,  160,  162,  162,  163,  166,  177,  176,  170,  171,

      169,  172,  168,  173,  174,    0,  175,    0,    0,    0,
        0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
        0,    0,  133,  134,  164,    0,  180,  181,  182,  183,
      186,  186,   45,  186,  186,  186,  186,  150,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,   35,
       61,  186,  186,  186,  186,  186,  186,  186,  186,  186,
       13,  186,   49,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,   77,  186,  186,
      186,  186,  186,  186,  186,  186,   55,  186,  186,   25,

      186,  186,  186,  186,    0,    0,    0,    0,  180,    0,
        0,    0,    0,    0,  183,    0,  186,  186,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  180,  181,  182,  183,  186,  186,
      143,  186,  186,  186,  186,  186,  186,  146,  186,   51,
      186,   79,  155,  186,  186,   27,  186,  186,  186,  186,
      186,  186,  186,  186,  186,   33,    6,  186,  186,  186,
      186,  186,  186,  186,  186,  186,   10,  186,  186,   64,
       65,  186,   67,  186,   14,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,   50,

       78,  186,  186,  186,  186,  186,  186,   54,  186,  186,
       81,  186,  186,  186,    0,    0,    0,    0,    0,    0,
      180,    0,    0,    0,    0,    0,  183,    0,    0,    0,
        0,    0,   88,    0,    0,   94,    0,    0,    0,   99,
        0,    0,    0,    0,  135,  180,  180,  181,  181,  182,
      182,  183,  183,  186,  186,  186,  156,  147,  148,  149,
      186,  186,  186,  186,  186,  151,  186,   26,   28,    4,
      186,  186,  186,   31,  186,  186,  186,  186,  186,   47,
      186,   60,   36,  186,  186,   63,   11,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  186,  186,   76,  186,  186,  186,   52,  186,   41,
      186,  186,   43,   44,  186,    0,    0,    0,    0,  180,
      180,  185,    0,    0,    0,  183,  183,    0,    0,    0,
        0,    0,    0,   89,   90,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  186,  158,  186,  186,  144,  152,
      153,  154,  186,  186,  186,  186,    5,   58,  186,  186,
      186,  186,    9,  186,  186,  186,  186,  186,  186,  186,
      186,  186,   73,  186,  186,   19,   39,  186,  186,   40,
       21,   22,  186,   42,   53,  186,  186,  186,    0,    0,
        0,    0,    0,    0,   85,    0,   87,   91,    0,    0,

        0,    0,    0,    0,    0,    0,  186,  157,  186,  186,
      186,  186,   30,   59,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,   71,  186,   16,  186,  186,  186,
      186,  186,   80,   82,    0,    0,    0,    0,    0,    0,
        0,    0,   98,    0,    0,  102,  186,   74,  186,   29,
      186,  186,  186,  186,   62,   12,   66,  186,   15,   69,
       70,  186,   18,   75,   20,  186,  186,    0,    0,    0,
        0,    0,   93,   95,    0,  100,    0,  145,  186,  186,
      186,    7,  186,  186,  186,  186,   23,   24,  178,   83,
        0,   86,    0,    0,    0,  186,  186,  186,  186,  186,

      186,   72,    0,    0,    0,    0,  186,  186,   57,   34,
        8,   68,  186,    0,   92,    0,    0,  186,  186,  186,
       84,   97,    0,  186,   56,  186,    0,    3,  186,  101,
       17,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   22,   24,   25,   26,    1,   27,
       28,   29,   30,    1,   31,   32,   33,   34,   35,   36,
       37,   37,   38,   37,   37,   39,   37,   37,   37,   40,
       37,   37,   41,   42,   43,   37,   37,   44,   37,   37,
       45,   46,   47,   48,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   37,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[79] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    1,    1,    9,    1,    1,
       10,   10,   10,   10,   11,   10,   12,   12,   12,   12,
       12,   12,   12,   12,    1,    3,   13,    1,   14,   10,
       10,   10,   10,   11,   10,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[762] =
    {   0,
        0,   66,   89,   90,   91,   92,    0,    0, 2117, 2118,
     2114, 2118, 2087, 2118,   53, 2086, 2105, 2118, 2118, 2084,
       86,   90, 2096,  105,  122,  131, 2118,   82, 2082,   94,
     2079,  194,   63,   70,   66, 2046,   38, 2045,   68,  104,
       95,   97,    0, 2118, 2118, 2057,   69,   98,  115,  219,
      107,  124,  122,  223,  225,  101,  130,  119,  231,  237,
      242,  241, 2043,  224,  258, 2118, 2028, 2118, 2118,  304,
      309,  321,  368,  284,  438,    0, 2118,  264,    0, 2118,
     2118,  358, 2101, 2118, 2032, 2038, 2033,  265,  260,  228,
     2045, 2040,  294, 2047, 2118, 2118, 2118, 2118, 2118, 2118,

     2118,  334, 2118, 2081, 2118,    0,  425,  284,  359,  476,
     2118, 2118, 2118, 2118, 2118, 2118,  531,  609, 2022, 2031,
     2043, 2023, 2028, 2022, 2026, 2028, 2021, 2022, 2023, 2035,
     2034, 2015, 2027,   94, 2030, 2017,   61, 2025,    0, 2015,
     2009, 2006, 2006, 2013,  246, 2006, 2003, 2020,    0, 2005,
      297,    0, 1994,  296, 1999, 2006, 2003,  300, 2010, 1996,
      342, 2011,  294, 2005,  306, 1999,  303,  333, 2001, 1992,
      261, 1993, 1993, 1989, 2004,  340, 1993, 2118,  499,  637,
      329,  429, 2118,  545,  707,  749,  784,  823,    0,  866,
        0,    0, 2036,  383, 2118,    0, 2118, 2118, 2118, 2118,

     2118, 2118, 2118, 2118, 2118, 1976, 2118, 2000, 1989, 1985,
     1980, 1993, 1979, 1984, 1981, 2118, 1992, 1968, 1978, 1979,
     1969, 1971, 2118, 2118, 2021,    0,  578,  389,  532,  899,
      954, 1032,    0, 1975, 1968, 1982, 1982,  447, 1963, 1975,
     1971, 1974, 1959, 1963, 1975, 1970, 1971, 1955,  346,  361,
     1959, 1979, 1969, 1964, 1956, 1962,  130, 1961, 1964,    0,
        0, 1947, 1949, 1953, 1952, 1941, 1939, 1953, 1933, 1937,
        0, 1954,    0,  364,  367, 1945, 1936, 1933,  382, 1930,
     1931, 1938, 1943, 1927,  366, 1938, 1939,    0, 1939, 1924,
     1922, 1923, 1935, 1920, 1924, 1932,    0, 1931, 1913,    0,

     1924, 1916, 1921, 1920,  438, 1964, 1108,  624, 1160, 1202,
      694,  730, 1235, 1276, 1315,  763,  463,  465,    0, 1920,
      367, 1920, 1922, 1917, 1911, 1919, 1920, 1915, 1928, 1910,
     1906, 1890, 1891, 1901,  804,  612,  657, 1354,  433,  437,
      441,  455,  524,  466,  641,  585,  584,  442,  525,  536,
      604,  540,  674,  653,  687,  543,  613,  622,  742,  654,
      688,  692,  803,  691,  646,  544,  579,  728,  729,  813,
      746,  821,  816,  745,  783,  853,  817,  845,  846,  849,
      850,  858,  854,  859,  862,  889,  880,  924,  930,  893,
      929,  925,  942,  939,  945,  949,  957,  961,  967,  897,

      962,  966,  970, 1002, 1003, 1016, 1017,  971, 1006, 1023,
      979, 1035, 1043, 1026, 1095,    0, 1932, 1407, 1449, 1022,
     1149,  654, 1080, 1496,  680, 1546, 1585,    0, 1886, 1879,
     1882, 1888, 1878, 1880, 1866, 1061, 1863, 1876, 1879, 2118,
     1873, 1871, 1864, 1873, 2118, 1182, 1169, 1087,  747, 1215,
     1223, 1872, 1871, 1628, 1865, 1862, 1888,    0,    0,    0,
     1857, 1849, 1879, 1882, 1877,    0, 1833,    0,    0,    0,
     1823, 1819, 1818,    0, 1809, 1806, 1812, 1802, 1811,    0,
     1801,    0,    0, 1798, 1810,    0,    0, 1787, 1777, 1764,
     1763, 1767, 1770, 1768, 1772, 1752, 1755, 1770, 1756, 1726,

     1715, 1717, 1692,    0, 1700, 1681, 1682,    0, 1690, 1679,
     1682, 1685,    0,    0, 1681, 1083, 1270, 1108, 1132, 1398,
     1399, 2118, 1316, 1183,  867, 1056, 1059,    0, 1671, 1637,
     1612, 1611, 1617, 2118, 2118, 1637, 1612, 1619, 1610, 1628,
     1598, 1597, 1610, 1601,  241, 1615,  355,  422, 1614, 1613,
     1612, 1611,  425,  434,  363, 1090, 1610, 1609, 1044,  528,
      616, 1091, 1608, 1101,  649,  392, 1092,  894, 1104,  857,
     1093, 1048, 1607, 1105, 1113, 1597, 1596, 1163, 1192, 1586,
     1585, 1584, 1103, 1583, 1582, 1203, 1227, 1181, 1234, 1374,
     1461,    0, 1577, 1569, 2118, 1573, 2118, 2118, 1557, 1556,

     1560, 1564, 1558, 1551, 1574, 1556, 1228, 1564, 1218, 1236,
     1259, 1267, 1547, 1546, 1229, 1255, 1273, 1276, 1256,  965,
     1294, 1295, 1298, 1268, 1545, 1094, 1544, 1375, 1306, 1353,
      767, 1161, 1543, 1542,    0, 1528, 1519, 1526, 1531, 1527,
     1521, 1508, 2118, 1509, 1511, 2118, 1370, 1526, 1390, 1525,
     1392, 1393, 1313, 1305, 1515, 1512, 1511, 1391, 1510, 1509,
     1508, 1364, 1507, 1506, 1496, 1428, 1374, 1465, 1487, 1486,
     1485, 1472, 2118, 2118, 1483, 2118, 1482, 1460, 1365, 1418,
     1440, 1430, 1403, 1429, 1396, 1446, 1372, 1368, 2118, 2118,
     1318, 2118, 1331, 1288, 1229, 1443, 1444, 1447, 1400, 1458,

     1404, 1448, 1227, 1153, 1162, 1056,  509, 1456, 1040,  946,
      898,  890, 1442,  811, 2118,  753,  702, 1459, 1310, 1462,
     2118, 2118,  696, 1479,  565, 1475,  452,  459, 1488, 2118,
       35, 2118, 1677, 1691, 1705, 1719, 1726, 1736, 1750, 1764,
     1778, 1792, 1806, 1819, 1833, 1847, 1857, 1865, 1872, 1876,
     1882, 1889, 1896, 1900, 1913, 1926, 1936, 1944, 1951, 1955,
     1959
    } ;

static yyconst short int yy_def[762] =
    {   0,
      732,    1,  733,  733,  734,  734,  735,  735,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  736,  736,  732,  732,  732,  732,
      732,  732,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,  736,  732,  732,  737,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,  732,  732,  732,  732,  738,
      738,  732,  736,   73,  737,  739,  732,  740,  741,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  732,  732,  742,  742,  742,  742,  742,
      732,  732,  732,  732,  732,  732,  743,  743,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  737,
      737,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  732,  732,  738,
      180,  744,  732,  742,  742,  742,  742,  187,   75,  737,
       75,  739,  740,  740,  732,  741,  732,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  745,  745,  745,  745,  745,
      746,  746,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  747,  748,  745,  745,  745,  745,
      745,  745,  745,  745,  314,  732,  190,  190,  749,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  750,  750,  750,  750,  335,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  732,  752,  748,  335,  335,  418,
      418,  419,  419,  418,  424,  335,  426,  753,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  754,  754,  190,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,

      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  752,  755,  747,  518,  756,
      756,  732,  752,  757,  748,  758,  758,  759,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  757,  732,
      732,  760,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  761,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  732,  732,
      732,  732,  732,  732,  732,  454,  454,  454,  454,  454,

      454,  454,  732,  732,  732,  732,  454,  454,  454,  454,
      454,  454,  454,  732,  732,  732,  732,  454,  454,  454,
      732,  732,  732,  454,  454,  454,  732,  454,  454,  732,
      454,    0,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732
    } ;

static yyconst short int yy_nxt[2197] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   10,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   26,   26,
       26,   26,   26,   26,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   36,   38,   36,   39,
       40,   41,   42,   36,   43,   10,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   36,   54,   36,   55,
       56,   57,   58,   59,   36,   60,   61,   62,   63,   64,
       65,   36,   36,   36,   66,   67,   68,   69,   70,   71,
       72,  732,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   77,   77,   80,   80,   81,   81,  123,   98,  117,

       78,   78,   85,  100,   86,   87,   88,   89,  111,  112,
       90,   91,   92,   99,   75,  250,  103,  101,  251,   93,
      104,  114,  115,   94,  117,  120,  121,  117,  122,  117,
      117,  117,  105,  125,  129,  132,   82,   82,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  117,  126,  117,  117,
      246,  247,  117,  133,  134,  117,  141,  128,  142,  155,
      107,  127,  108,  144,  135,  147,  117,  136,  143,  107,
      117,  145,  158,  117,  109,  117,  146,  156,  159,  369,
      148,  117,  157,  110,  106,  106,  370,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  106,
      106,  106,  106,  106,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  106,  106,
      106,  106,  118,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  119,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  106,  106,
      106,  106,  137,  174,  153,  194,  138,  149,  154,  195,
      117,  139,  216,  150,  151,  117,  117,  732,  217,  152,
      163,  140,  117,  160,  164,  165,  161,  170,  117,  162,

      228,  228,  117,  117,  166,  258,  171,  259,  607,  167,
      168,  175,  169,  172,  176,  177,   98,  214,  179,  117,
      180,  732,  100,  179,  211,  180,  212,  106,  215,  296,
      213,   99,  228,  297,  106,  102,  101,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  106,  220,  223,  264,
      270,  265,  290,  275,  266,  106,  221,  283,  284,  267,
      224,  285,  197,  271,  268,  287,  198,  276,  291,  182,
      183,  608,  732,  288,  199,  229,  229,  229,  229,  229,
      229,  229,  184,  292,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  302,  194,  279,  293,  303,  195,  280,

      732,  732,  186,  200,  281,  336,  336,  229,  201,  732,
      361,  187,  202,  359,  362,  360,  185,  383,  108,  203,
      612,  186,  397,  204,  384,  205,  206,  207,  385,  430,
      109,  183,  386,  390,  398,  431,  391,  336,  732,  188,
      183,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      316,  316,  179,  620,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  305,  345,  183,  346,  183,  732,  347,
      348,  732,  190,  227,  610,  732,  732,  732,  732,  445,
      732,  131,  305,  445,  609,  131,  191,  445,  445,  131,
      131,  190,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  445,  611,  131,  455,  732,  230,  230,  230,  230,
      230,  230,  445,  730,  131,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  230,  230,  230,  230,  230,  230,
      230,  226,  226,  457,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  182,  337,  337,
      337,  337,  337,  337,  337,  732,  226,  226,  226,  226,
      226,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      445,  445,  131,  131,  732,  226,  226,  226,  226,  232,
      337,  718,  445,  456,  131,  615,  445,  461,  131,  445,
      445,  131,  131,  307,  335,  335,  335,  335,  335,  335,

      335,  335,  335,  459,  460,  226,  226,  226,  226,  226,
      226,  732,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  445,  335,  131,  448,  448,
      445,  445,  131,  131,  226,  226,  226,  226,  226,  183,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  732,
      445,  179,  131,  226,  226,  226,  226,  232,  445,  445,
      449,  131,  732,  458,  732,  462,  732,  732,  445,  469,
      131,  305,  418,  450,  450,  450,  450,  450,  450,  450,
      306,  616,  732,  226,  226,  226,  226,  445,  470,  131,
      305,  463,  445,  464,  131,  732,  465,  466,  619,  445,

      445,  131,  131,  445,  467,  451,  477,  472,  306,  183,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  444,
      445,  308,  131,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  183,  445,  445,  131,  131,  445,  445,  131,
      131,  310,  423,  444,  476,  468,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  309,  473,  474,  727,  723,
      310,  311,  311,  449,  449,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  445,  445,  131,  131,  423,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  445,  478,
      131,  445,  445,  131,  131,  449,  479,  312,  313,  471,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  481,
      484,  415,  722,  732,  314,  314,  314,  314,  314,  314,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  445,
      666,  131,  314,  314,  314,  314,  314,  314,  314,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  485,  445,
      445,  131,  447,  315,  315,  315,  315,  315,  315,  445,
      475,  131,  445,  445,  131,  131,  480,  445,  483,  131,
      721,  315,  315,  315,  315,  315,  315,  315,  316,  316,
      482,  416,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  445,  445,  131,  131,  445,  445,  131,  131,  445,

      445,  131,  131,  732,  445,  445,  131,  131,  445,  624,
      131,  488,  487,  445,  318,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  486,  489,  445,  490,  131,  338,
      338,  338,  338,  338,  338,  445,  732,  131,  491,  445,
      732,  131,  492,  445,  732,  131,  495,  338,  338,  338,
      338,  338,  338,  338,  334,  334,  622,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      445,  445,  131,  131,  497,  445,  445,  131,  131,  334,
      334,  334,  334,  334,  494,  445,  496,  131,  445,  493,
      131,  445,  732,  131,  500,  445,  499,  131,  334,  334,

      334,  334,  340,  445,  498,  131,  501,  445,  445,  131,
      131,  732,  445,  445,  131,  131,  445,  445,  131,  131,
      657,  506,  502,  505,  732,  445,  503,  131,  334,  334,
      334,  334,  334,  334,  504,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  445,  445,
      131,  131,  445,  507,  131,  511,  444,  334,  334,  334,
      334,  334,  445,  445,  131,  131,  515,  509,  508,  445,
      416,  131,  445,  416,  131,  444,  334,  334,  334,  334,
      340,  445,  183,  131,  512,  522,  732,  510,  513,  445,
      732,  131,  732,  732,  732,  614,  514,  183,  536,  537,

      538,  626,  445,  449,  449,  732,  334,  334,  334,  334,
      183,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      316,  316,  589,  717,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  445,  183,  449,  732,  732,  732,  732,
      732,  621,  419,  415,  732,  732,  589,  732,  617,  732,
      732,  732,  618,  623,  445,  662,  418,  613,  627,  732,
      631,  419,  183,  179,  625,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  420,  628,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  419,  590,  590,  521,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  732,  421,  732,
      667,  716,  715,  419,  422,  422,  629,  447,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  732,  445,  445,
      447,  451,  451,  451,  451,  451,  451,  451,  732,  451,
      451,  451,  451,  451,  451,  451,  590,  590,  634,  732,
      423,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      632,  445,  630,  451,  732,  424,  424,  424,  424,  424,
      424,  451,  183,  732,  732,  732,  714,  648,  706,  633,
      732,  647,  732,  424,  424,  424,  424,  424,  424,  424,
      425,  652,  426,  426,  426,  426,  426,  426,  426,  426,

      426,  732,  732,  649,  305,  732,  426,  426,  426,  426,
      426,  426,  650,  732,  732,  656,  445,  653,  522,  732,
      651,  661,  732,  305,  426,  426,  426,  426,  426,  426,
      426,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      732,  732,  654,  655,  732,  427,  427,  427,  427,  427,
      427,  732,  732,  705,  684,  589,  732,  660,  664,  732,
      659,  658,  445,  427,  427,  427,  427,  427,  427,  427,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  589,
      704,  683,  725,  703,  452,  452,  452,  452,  452,  452,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  732,

      183,  183,  453,  452,  452,  452,  452,  452,  452,  183,
      732,  732,  179,  179,  732,  686,  732,  696,  732,  665,
      732,  732,  591,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  305,  305,  663,  678,  732,  732,  732,  732,
      688,  518,  732,  679,  445,  732,  732,  680,  685,  732,
      732,  305,  305,  681,  682,  182,  710,  701,  699,  712,
      518,  316,  316,  522,  732,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  732,  732,  732,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  732,  697,  732,  732,
      732,  698,  732,  732,  732,  687,  700,  415,  522,  702,

      709,  708,  732,  713,  732,  732,  732,  720,  732,  591,
      707,  711,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  732,  724,  719,  726,  732,  523,  523,  523,  523,
      523,  523,  728,  695,  732,  524,  694,  693,  692,  691,
      690,  689,  732,  729,  516,  523,  523,  523,  523,  523,
      523,  731,  732,  732,  732,  732,  732,  732,  732,  524,
      416,  732,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  732,  732,  677,  676,  675,  525,  525,  525,  525,
      525,  525,  674,  673,  672,  671,  670,  669,  732,  732,
      732,  732,  732,  732,  417,  525,  525,  525,  525,  525,

      525,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      732,  646,  645,  644,  643,  526,  526,  526,  526,  526,
      526,  642,  641,  640,  639,  638,  637,  636,  732,  732,
      732,  732,  732,  527,  526,  526,  526,  526,  526,  526,
      732,  732,  732,  732,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  606,  605,  604,  603,  602,  601,  600,  599,
      598,  597,  596,  595,  445,  594,  131,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,  106,
      593,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  130,  588,  130,  130,  130,  587,  130,
      181,  586,  181,  181,  181,  585,  584,  583,  582,  181,
      192,  581,  192,  580,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  196,  579,
      578,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  226,  577,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  231,  576,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      182,  575,  574,  573,  572,  571,  182,  570,  569,  182,
      568,  567,  182,  334,  566,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  339,  565,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  415,  415,  564,  415,  563,  562,  561,  560,  559,
      415,  417,  417,  558,  417,  417,  557,  556,  417,  428,
      555,  428,  428,  444,  554,  444,  444,  444,  444,  454,
      553,  454,  454,  454,  454,  454,  516,  552,  516,  516,

      551,  550,  516,  528,  549,  528,  528,  453,  548,  453,
      453,  547,  453,  453,  182,  546,  545,  732,  445,  445,
      182,  544,  543,  182,  542,  182,  182,  521,  541,  540,
      539,  535,  521,  521,  534,  533,  521,  532,  521,  521,
      591,  591,  531,  591,  530,  529,  416,  445,  591,  591,
      527,  527,  443,  527,  527,  442,  527,  527,  592,  441,
      592,  592,  635,  440,  635,  635,  668,  439,  668,  668,
      438,  437,  436,  435,  434,  433,  432,  429,  416,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  396,  395,  394,  393,  392,

      389,  388,  387,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  368,  367,  366,  365,  364,
      363,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  344,  343,  342,  341,  225,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  732,  304,  301,  300,  299,  298,  295,  294,  289,
      286,  282,  278,  277,  274,  273,  272,  269,  263,  262,
      261,  260,  257,  256,  255,  254,  253,  252,  249,  248,
      245,  244,  131,  131,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  225,  222,  219,  218,  210,

      209,  208,   83,  178,  173,  131,  124,  117,  116,  113,
      102,   97,   96,   95,   84,   83,  732,    9,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732

    } ;

static yyconst short int yy_chk[2197] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
        2,  731,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    4,    5,    6,    5,    6,   37,   21,   37,

        3,    4,   15,   22,   15,   15,   15,   15,   28,   28,
       15,   15,   15,   21,    2,  137,   24,   22,  137,   15,
       24,   30,   30,   15,   33,   33,   34,   35,   35,   39,
       47,   34,   24,   39,   42,   47,    5,    6,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   41,   40,   42,   48,
      134,  134,   56,   48,   49,   40,   51,   41,   51,   56,
       25,   40,   25,   52,   49,   53,   49,   49,   51,   26,
       58,   52,   58,   53,   25,   52,   52,   57,   58,  257,
       53,   57,   57,   25,   32,   32,  257,   32,   32,   32,

       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   50,   64,   55,   78,   50,   54,   55,   78,
       50,   50,   90,   54,   54,   64,   55,  545,   90,   54,
       60,   50,   59,   59,   60,   61,   59,   62,   60,   59,

      108,  108,   62,   61,   61,  145,   62,  145,  545,   61,
       61,   65,   61,   62,   65,   65,   70,   89,   70,   65,
       70,   71,   71,   71,   88,   71,   88,   74,   89,  171,
       88,   70,  108,  171,   74,   72,   71,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   74,   93,  102,  151,
      154,  151,  167,  158,  151,   74,   93,  163,  163,  151,
      102,  163,   82,  154,  151,  165,   82,  158,  167,   72,
       73,  547,  181,  165,   82,  109,  109,  109,  109,  109,
      109,  109,   73,  168,   73,   73,   73,   73,   73,   73,
       73,   73,   73,  176,  194,  161,  168,  176,  194,  161,

      181,  547,   73,   82,  161,  228,  228,  109,   82,  555,
      250,   73,   82,  249,  250,  249,   73,  274,   73,   82,
      555,   73,  285,   82,  274,   82,   82,   82,  275,  321,
       73,  182,  275,  279,  285,  321,  279,  228,  566,   73,
       75,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      305,  305,   75,  566,   75,   75,   75,   75,   75,   75,
       75,   75,   75,  182,  238,  317,  238,  318,  548,  238,
      238,  553,   75,  107,  553,  317,  317,  318,  318,  339,
      554,  339,  182,  340,  548,  340,   75,  341,  348,  341,
      348,   75,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  342,  554,  342,  342,  728,  110,  110,  110,  110,
      110,  110,  344,  727,  344,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  110,  110,  110,  110,  110,  110,
      110,  117,  117,  344,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  179,  229,  229,
      229,  229,  229,  229,  229,  707,  117,  117,  117,  117,
      117,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      343,  349,  343,  349,  560,  117,  117,  117,  117,  117,
      229,  707,  350,  343,  350,  560,  352,  349,  352,  356,
      366,  356,  366,  184,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  346,  347,  117,  117,  117,  117,  118,
      118,  725,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  367,  227,  367,  336,  336,
      347,  346,  347,  346,  118,  118,  118,  118,  118,  180,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  180,
      351,  180,  351,  118,  118,  118,  118,  118,  336,  357,
      336,  357,  561,  345,  180,  351,  422,  422,  358,  357,
      358,  180,  308,  337,  337,  337,  337,  337,  337,  337,
      180,  561,  425,  118,  118,  118,  118,  345,  358,  345,
      180,  353,  365,  353,  365,  565,  353,  353,  565,  354,

      360,  354,  360,  337,  354,  337,  365,  360,  180,  185,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  425,
      353,  185,  353,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  312,  355,  361,  355,  361,  364,  362,  364,
      362,  185,  311,  425,  364,  355,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  185,  361,  362,  723,  717,
      185,  186,  186,  449,  449,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  368,  369,  368,  369,  312,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  359,  368,
      359,  374,  371,  374,  371,  449,  369,  186,  187,  359,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  371,
      374,  316,  716,  631,  187,  187,  187,  187,  187,  187,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  375,
      631,  375,  187,  187,  187,  187,  187,  187,  187,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  375,  363,
      335,  363,  335,  188,  188,  188,  188,  188,  188,  370,
      363,  370,  373,  377,  373,  377,  370,  372,  373,  372,
      714,  188,  188,  188,  188,  188,  188,  188,  190,  190,
      372,  525,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  378,  379,  378,  379,  380,  381,  380,  381,  376,

      383,  376,  383,  570,  382,  384,  382,  384,  385,  570,
      385,  379,  378,  525,  190,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  376,  382,  387,  384,  387,  230,
      230,  230,  230,  230,  230,  386,  712,  386,  386,  390,
      568,  390,  387,  400,  711,  400,  390,  230,  230,  230,
      230,  230,  230,  230,  231,  231,  568,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      388,  392,  388,  392,  392,  391,  389,  391,  389,  231,
      231,  231,  231,  231,  389,  394,  391,  394,  393,  388,
      393,  395,  710,  395,  395,  396,  394,  396,  231,  231,

      231,  231,  231,  397,  393,  397,  396,  398,  401,  398,
      401,  620,  402,  399,  402,  399,  403,  408,  403,  408,
      620,  403,  397,  402,  420,  411,  398,  411,  231,  231,
      231,  231,  232,  232,  399,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  404,  405,
      404,  405,  409,  404,  409,  409,  420,  232,  232,  232,
      232,  232,  406,  407,  406,  407,  414,  406,  405,  410,
      526,  410,  414,  527,  414,  420,  232,  232,  232,  232,
      232,  412,  423,  412,  410,  516,  709,  407,  412,  413,
      559,  413,  423,  423,  572,  559,  413,  415,  436,  436,

      436,  572,  526,  448,  448,  527,  232,  232,  232,  232,
      307,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      518,  518,  516,  706,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  448,  519,  448,  556,  562,  567,  571,
      626,  567,  307,  415,  519,  519,  516,  564,  562,  583,
      569,  574,  564,  569,  518,  626,  307,  556,  574,  575,
      583,  307,  309,  421,  571,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  309,  575,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  309,  524,  524,  421,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  632,  309,  578,
      632,  705,  704,  309,  310,  310,  578,  447,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  588,  446,  524,
      446,  450,  450,  450,  450,  450,  450,  450,  579,  451,
      451,  451,  451,  451,  451,  451,  589,  589,  588,  586,
      310,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      586,  450,  579,  450,  609,  313,  313,  313,  313,  313,
      313,  451,  517,  587,  607,  615,  703,  609,  695,  587,
      589,  607,  610,  313,  313,  313,  313,  313,  313,  313,
      314,  615,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  616,  619,  610,  517,  611,  314,  314,  314,  314,
      314,  314,  611,  612,  624,  619,  517,  616,  523,  617,
      612,  624,  618,  517,  314,  314,  314,  314,  314,  314,
      314,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      621,  622,  617,  618,  623,  315,  315,  315,  315,  315,
      315,  654,  629,  694,  654,  523,  719,  623,  629,  653,
      622,  621,  523,  315,  315,  315,  315,  315,  315,  315,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  523,
      693,  653,  719,  691,  338,  338,  338,  338,  338,  338,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  630,

      520,  521,  338,  338,  338,  338,  338,  338,  338,  418,
      662,  679,  520,  521,  688,  662,  647,  679,  687,  630,
      667,  628,  590,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  520,  521,  628,  647,  649,  658,  651,  652,
      667,  418,  685,  649,  520,  521,  699,  649,  658,  683,
      701,  520,  521,  651,  652,  418,  699,  685,  683,  701,
      418,  419,  419,  591,  680,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  666,  684,  682,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  681,  680,  713,  696,
      697,  681,  686,  698,  702,  666,  684,  419,  424,  686,

      698,  697,  708,  702,  700,  718,  678,  713,  720,  591,
      696,  700,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  726,  718,  708,  720,  724,  424,  424,  424,  424,
      424,  424,  724,  677,  729,  424,  675,  672,  671,  670,
      669,  668,  665,  726,  424,  424,  424,  424,  424,  424,
      424,  729,  664,  663,  661,  660,  659,  657,  656,  424,
      426,  655,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  650,  648,  645,  644,  642,  426,  426,  426,  426,
      426,  426,  641,  640,  639,  638,  637,  636,  634,  633,
      627,  625,  614,  613,  426,  426,  426,  426,  426,  426,

      426,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      608,  606,  605,  604,  603,  427,  427,  427,  427,  427,
      427,  602,  601,  600,  599,  596,  594,  593,  585,  584,
      582,  581,  580,  427,  427,  427,  427,  427,  427,  427,
      454,  454,  577,  576,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  573,  563,  558,  557,  552,  551,  550,
      549,  546,  544,  543,  542,  541,  540,  539,  538,  537,
      536,  533,  532,  531,  454,  530,  454,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      734,  734,  734,  734,  734,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  736,
      529,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  737,  515,  737,  737,  737,  512,  737,
      738,  511,  738,  738,  738,  510,  509,  507,  506,  738,
      739,  505,  739,  503,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  741,  502,
      501,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  742,  500,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  743,  499,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      744,  498,  497,  496,  495,  494,  744,  493,  492,  744,
      491,  490,  744,  745,  489,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  746,  488,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  747,  747,  485,  747,  484,  481,  479,  478,  477,
      747,  748,  748,  476,  748,  748,  475,  473,  748,  749,
      472,  749,  749,  750,  471,  750,  750,  750,  750,  751,
      467,  751,  751,  751,  751,  751,  752,  465,  752,  752,

      464,  463,  752,  753,  462,  753,  753,  754,  461,  754,
      754,  457,  754,  754,  755,  456,  455,  453,  452,  444,
      755,  443,  442,  755,  441,  755,  755,  756,  439,  438,
      437,  435,  756,  756,  434,  433,  756,  432,  756,  756,
      757,  757,  431,  757,  430,  429,  417,  334,  757,  757,
      758,  758,  333,  758,  758,  332,  758,  758,  759,  331,
      759,  759,  760,  330,  760,  760,  761,  329,  761,  761,
      328,  327,  326,  325,  324,  323,  322,  320,  306,  304,
      303,  302,  301,  299,  298,  296,  295,  294,  293,  292,
      291,  290,  289,  287,  286,  284,  283,  282,  281,  280,

      278,  277,  276,  272,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  259,  258,  256,  255,  254,  253,  252,
      251,  248,  247,  246,  245,  244,  243,  242,  241,  240,
      239,  237,  236,  235,  234,  225,  222,  221,  220,  219,
      218,  217,  215,  214,  213,  212,  211,  210,  209,  208,
      206,  193,  177,  175,  174,  173,  172,  170,  169,  166,
      164,  162,  160,  159,  157,  156,  155,  153,  150,  148,
      147,  146,  144,  143,  142,  141,  140,  138,  136,  135,
      133,  132,  131,  130,  129,  128,  127,  126,  125,  124,
      123,  122,  121,  120,  119,  104,   94,   92,   91,   87,

       86,   85,   83,   67,   63,   46,   38,   36,   31,   29,
       23,   20,   17,   16,   13,   11,    9,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "lex.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define MULTILINE_COMMENT 1

#define STRING 2

#define CHAR 3

#line 15 "lex.l"
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <iostream>
    #include <string>
    #include <ctype.h>
    using namespace std;
#line 1114 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 24 "lex.l"



    void convertCharacterCodeToString(char charCode[], int pos, char *str);
    void removeChar(const char * str, char * dest, char deletedChar);
	
	
	char str[1024];
	string stdstr = "";
	int lineNumber = 1;  
	


#line 1278 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 733 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2118 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 37 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 38 "lex.l"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 41 "lex.l"
{printf("(%s) - ASSOCIATEDTYPE_KEY_WORD\n", yytext);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "lex.l"
{printf("(%s) - CLASS_KEY_WORD\n", yytext);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 43 "lex.l"
{printf("(%s) - DEINIT_KEY_WORD\n", yytext);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "lex.l"
{printf("(%s) - ENUM_KEY_WORD\n", yytext);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "lex.l"
{printf("(%s) - EXTENSION_KEY_WORD\n", yytext);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 46 "lex.l"
{printf("(%s) - FILEPRIVATE_KEY_WORD\n", yytext);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "lex.l"
{printf("(%s) - IMPORT_KEY_WORD\n", yytext);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "lex.l"
{printf("(%s) - INIT_KEY_WORD\n", yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "lex.l"
{printf("(%s) - INOUT_KEY_WORD\n", yytext);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "lex.l"
{printf("(%s) - INTERNAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "lex.l"
{printf("(%s) - LET_KEY_WORD\n", yytext);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "lex.l"
{printf("(%s) - OPEN_KEY_WORD\n", yytext);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "lex.l"
{printf("(%s) - OPERATOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 54 "lex.l"
{printf("(%s) - PRIVATE_KEY_WORD\n", yytext);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 55 "lex.l"
{printf("(%s) - PRECEDENCEGROUP_KEY_WORD\n", yytext);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 56 "lex.l"
{printf("(%s) - PROTOCOL_KEY_WORD\n", yytext);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "lex.l"
{printf("(%s) - PUBLIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "lex.l"
{printf("(%s) - RETHROWS_KEY_WORD\n", yytext);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "lex.l"
{printf("(%s) - STATIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "lex.l"
{printf("(%s) - STRUCT_KEY_WORD\n", yytext);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "lex.l"
{printf("(%s) - SUBSCRIPT_KEY_WORD\n", yytext);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "lex.l"
{printf("(%s) - TYPEALIAS_KEY_WORD\n", yytext);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "lex.l"
{printf("(%s) - VAR_KEY_WORD\n", yytext);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 66 "lex.l"
{printf("(%s) - BREAK_KEY_WORD\n", yytext);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 67 "lex.l"
{printf("(%s) - CASE_KEY_WORD\n", yytext);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 68 "lex.l"
{printf("(%s) - CATCH_KEY_WORD\n", yytext);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 69 "lex.l"
{printf("(%s) - CONTINUE_KEY_WORD\n", yytext);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 70 "lex.l"
{printf("(%s) - DEFAULT_KEY_WORD\n", yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 71 "lex.l"
{printf("(%s) - DEFER_KEY_WORD\n", yytext);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 72 "lex.l"
{printf("(%s) - DO_KEY_WORD\n", yytext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 73 "lex.l"
{printf("(%s) - ELSE_KEY_WORD\n", yytext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 74 "lex.l"
{printf("(%s) - FALLTHROUGH_KEY_WORD\n", yytext);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 75 "lex.l"
{printf("(%s) - FOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 76 "lex.l"
{printf("(%s) - GUARD_KEY_WORD\n", yytext);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 77 "lex.l"
{printf("(%s) - IF_KEY_WORD\n", yytext);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 78 "lex.l"
{printf("(%s) - IN_KEY_WORD\n", yytext);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 79 "lex.l"
{printf("(%s) - REPEAT_KEY_WORD\n", yytext);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 80 "lex.l"
{printf("(%s) - RETURN_KEY_WORD\n", yytext);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 81 "lex.l"
{printf("(%s) - THROW_KEY_WORD\n", yytext);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 82 "lex.l"
{printf("(%s) - SWITCH_KEY_WORD\n", yytext);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 83 "lex.l"
{printf("(%s) - WHERE_KEY_WORD\n", yytext);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 84 "lex.l"
{printf("(%s) - WHILE_KEY_WORD\n", yytext);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 86 "lex.l"
{printf("(%s) - ANY_KEY_WORD\n", yytext);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 87 "lex.l"
{printf("(%s) - AS_KEY_WORD\n", yytext);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 88 "lex.l"
{printf("(%s) - FALSE_KEY_WORD\n", yytext);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 89 "lex.l"
{printf("(%s) - IS_KEY_WORD\n", yytext);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 90 "lex.l"
{printf("(%s) - NIL_KEY_WORD\n", yytext);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 91 "lex.l"
{printf("(%s) - SELF_KEY_WORD\n", yytext);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 92 "lex.l"
{printf("(%s) - SELF_KEY_WORD\n", yytext);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 93 "lex.l"
{printf("(%s) - SUPER_KEY_WORD\n", yytext);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 94 "lex.l"
{printf("(%s) - THROWS_KEY_WORD\n", yytext);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 95 "lex.l"
{printf("(%s) - TRUE_KEY_WORD\n", yytext);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 96 "lex.l"
{printf("(%s) - TRY_KEY_WORD\n", yytext);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 99 "lex.l"
{printf("(%s) - ASSOCIATIVITY_KEY_WORD\n", yytext);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 100 "lex.l"
{printf("(%s) - CONVENIENCE_KEY_WORD\n", yytext);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 101 "lex.l"
{printf("(%s) - DIDSET_KEY_WORD\n", yytext);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 102 "lex.l"
{printf("(%s) - DYNAMIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 103 "lex.l"
{printf("(%s) - FINAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 104 "lex.l"
{printf("(%s) - GET_KEY_WORD\n", yytext);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 105 "lex.l"
{printf("(%s) - INDIRECT_KEY_WORD\n", yytext);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 106 "lex.l"
{printf("(%s) - INFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 107 "lex.l"
{printf("(%s) - LAZY_KEY_WORD\n", yytext);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 108 "lex.l"
{printf("(%s) - LEFT_KEY_WORD\n", yytext);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 109 "lex.l"
{printf("(%s) - MUTATING_KEY_WORD\n", yytext);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 110 "lex.l"
{printf("(%s) - NONE_KEY_WORD\n", yytext);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 111 "lex.l"
{printf("(%s) - NONMUTATING_KEY_WORD\n", yytext);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 112 "lex.l"
{printf("(%s) - OPTIONAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 113 "lex.l"
{printf("(%s) - OVERRIDE_KEY_WORD\n", yytext);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 114 "lex.l"
{printf("(%s) - POSTFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 115 "lex.l"
{printf("(%s) - PRECEDENCE_KEY_WORD\n", yytext);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 116 "lex.l"
{printf("(%s) - PREFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 117 "lex.l"
{printf("(%s) - PROTOCOL_KEY_WORD\n", yytext);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 118 "lex.l"
{printf("(%s) - REQUIRED_KEY_WORD\n", yytext);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 119 "lex.l"
{printf("(%s) - RIGHT_KEY_WORD\n", yytext);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 120 "lex.l"
{printf("(%s) - SET_KEY_WORD\n", yytext);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 121 "lex.l"
{printf("(%s) - SOME_KEY_WORD\n", yytext);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 122 "lex.l"
{printf("(%s) - TYPE_KEY_WORD\n", yytext);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 123 "lex.l"
{printf("(%s) - UNOWNED_KEY_WORD\n", yytext);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 124 "lex.l"
{printf("(%s) - WEAK_KEY_WORD\n", yytext);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 125 "lex.l"
{printf("(%s) - WILLSET_KEY_WORD\n", yytext);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 128 "lex.l"
{printf("(%s) - #AVAILABLE_KEY_WORD\n", yytext);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 129 "lex.l"
{printf("(%s) - #COLORLITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 130 "lex.l"
{printf("(%s) - #COLUMN_KEY_WORD\n", yytext);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 131 "lex.l"
{printf("(%s) - #DSOHANDLE_KEY_WORD\n", yytext);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 132 "lex.l"
{printf("(%s) - #ELSEIF_WORD\n", yytext);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 133 "lex.l"
{printf("(%s) - #ELSE_WORD\n", yytext);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 134 "lex.l"
{printf("(%s) - #ENDIF_KEY_WORD\n", yytext);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 135 "lex.l"
{printf("(%s) - #ERROR_KEY_WORD\n", yytext);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 136 "lex.l"
{printf("(%s) - #FILEID_KEY_WORD\n", yytext);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 137 "lex.l"
{printf("(%s) - #FILELITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 138 "lex.l"
{printf("(%s) - #FILEPATH_KEY_WORD\n", yytext);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 139 "lex.l"
{printf("(%s) - #FILE_KEY_WORD\n", yytext);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 140 "lex.l"
{printf("(%s) - #FUNCTION_KEY_WORD\n", yytext);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 141 "lex.l"
{printf("(%s) - #IF_WORD\n", yytext);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 142 "lex.l"
{printf("(%s) - #IMAGELITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 143 "lex.l"
{printf("(%s) - #KEYPATH_KEY_WORD\n", yytext);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 144 "lex.l"
{printf("(%s) - #LINE_KEY_WORD\n", yytext);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 145 "lex.l"
{printf("(%s) - #SELECTOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 146 "lex.l"
{printf("(%s) - #SOURCELOCATION_KEY_WORD\n", yytext);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 147 "lex.l"
{printf("(%s) - #WARNING_KEY_WORD\n", yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 150 "lex.l"
{ printf("Found OPERATOR_PLUS: %s\n", yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 151 "lex.l"
{ printf("Found OPERATOR_MINUS: %s\n", yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 152 "lex.l"
{ printf("Found OPERATOR_DIVISION: %s\n", yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 153 "lex.l"
{ printf("Found OPERATOR_MULTIPLICATION: %s\n", yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 154 "lex.l"
{ printf("Found OPERATOR_MODULUS: %s\n", yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 157 "lex.l"
{ printf("Found OPERATOR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 158 "lex.l"
{ printf("Found OPERATOR_PLUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 159 "lex.l"
{ printf("Found OPERATOR_MINUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 160 "lex.l"
{ printf("Found OPERATOR_DIVIDE_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 161 "lex.l"
{ printf("Found OPERATOR_MUTIPLY_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 162 "lex.l"
{ printf("Found OPERATOR_MODULUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 165 "lex.l"
{ printf("Found OPERATOR_LEFT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 166 "lex.l"
{ printf("Found OPERATOR_RIGHT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 167 "lex.l"
{ printf("Found OPERATOR_BINARY_AND: %s\n", yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 168 "lex.l"
{ printf("Found OPERATOR_BINARY_OR: %s\n", yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 169 "lex.l"
{ printf("Found OPERATOR_BINARY_XOR: %s\n", yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 170 "lex.l"
{ printf("Found OPERATOR_TILDE: %s\n", yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 173 "lex.l"
{ printf("Found OPERATOR_LESS: %s\n", yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 174 "lex.l"
{ printf("Found OPERATOR_GREATER: %s\n", yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 175 "lex.l"
{ printf("Found OPERATOR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 176 "lex.l"
{ printf("Found OPERATOR_LESS_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 177 "lex.l"
{ printf("Found OPERATOR_GREATER_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 178 "lex.l"
{ printf("Found OPERATOR_NOT_EQUAL: %s\n", yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 181 "lex.l"
{ printf("Found OPERATOR_LOGICAL_AND: %s\n", yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 182 "lex.l"
{ printf("Found OPERATOR_LOGICAL_OR: %s\n", yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 183 "lex.l"
{ printf("Found OPERATOR_LOGICAL_NOT: %s\n", yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 186 "lex.l"
{ printf("Found OPERATOR_NIL_COALESCING: %s\n", yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 187 "lex.l"
{ printf("Found OPERATOR_INCREMENT: %s\n", yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 188 "lex.l"
{ printf("Found OPERATOR_DECREMENT: %s\n", yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "lex.l"
{ printf("Found OPERATOR_POINT: %s\n", yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "lex.l"
{ printf("Found OPERATOR_CLOSED_RANGE: %s\n", yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "lex.l"
{ printf("Found OPERATOR_HALF_OPEN_RANGE: %s\n", yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "lex.l"
{ printf("Found OPERATOR_ONE_SIDED_RANGE: %s\n", yytext); } 
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "lex.l"
{ printf("Found OPERATOR_COLON: %s\n", yytext); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "lex.l"
{ printf("Found LEFT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "lex.l"
{ printf("Found RIGHT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "lex.l"
{ printf("Found LEFT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "lex.l"
{ printf("Found RIGHT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "lex.l"
{ printf("Found LEFT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "lex.l"
{ printf("Found RIGHT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 205 "lex.l"
{ printf("Found TYPE_BOOL: %s\n", yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 206 "lex.l"
{ printf("Found TYPE_STRING: %s\n", yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 207 "lex.l"
{ printf("Found TYPE_CHARACTER: %s\n", yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 208 "lex.l"
{ printf("Found TYPE_INT8: %s\n", yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 209 "lex.l"
{ printf("Found TYPE_INT16: %s\n", yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 210 "lex.l"
{ printf("Found TYPE_INT32: %s\n", yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 211 "lex.l"
{ printf("Found TYPE_INT64: %s\n", yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 212 "lex.l"
{ printf("Found TYPE_INT: %s\n", yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 213 "lex.l"
{ printf("Found TYPE_UINT8: %s\n", yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 214 "lex.l"
{ printf("Found TYPE_UINT16: %s\n", yytext); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 215 "lex.l"
{ printf("Found TYPE_UINT32: %s\n", yytext); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 216 "lex.l"
{ printf("Found TYPE_UINT64: %s\n", yytext); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 217 "lex.l"
{ printf("Found TYPE_UINT: %s\n", yytext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 218 "lex.l"
{ printf("Found TYPE_FLOAT: %s\n", yytext); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 219 "lex.l"
{ printf("Found TYPE_FLOAT80: %s\n", yytext); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 220 "lex.l"
{ printf("Found TYPE_DOUBLE: %s\n", yytext); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 222 "lex.l"
{strcpy(str, ""); BEGIN(MULTILINE_COMMENT);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 223 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 224 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 225 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 226 "lex.l"
{ printf("Found MULTILINE_COMMENT: %s\n", str); BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(MULTILINE_COMMENT):
#line 227 "lex.l"
{ printf("MULTILINE_COMMENT ERROR in line %d: comment are not closed\n"); BEGIN(INITIAL); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 229 "lex.l"
{ printf("Found ONELINE_COMMENT: %s\n", yytext); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 231 "lex.l"
{ stdstr = ""; BEGIN(STRING); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 232 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 233 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 234 "lex.l"
{ stdstr += "\n"; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 235 "lex.l"
{ stdstr += "\b"; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 236 "lex.l"
{ stdstr += "\0"; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 237 "lex.l"
{ stdstr += "\\"; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 238 "lex.l"
{ stdstr += "\f"; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 239 "lex.l"
{ stdstr += "\r"; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 240 "lex.l"
{ stdstr += "\t"; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 241 "lex.l"
{ stdstr += "\v"; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 242 "lex.l"
{ stdstr += "\'"; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 243 "lex.l"
{ stdstr += "\""; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 244 "lex.l"
{
    char *a;
    int x = strtol(yytext + 3, &a, 16);
    if (x <= 127) {
        char buf[2];
        buf[0] = x;
        buf[1] = 0;
		stdstr += buf;
    } else {
        printf("Eror in %d: unicode not supported\n", lineNumber);
    }
 } 
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 256 "lex.l"
{ std::cout << "STRING: " << stdstr << std::endl; BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 257 "lex.l"
{ printf("Error in %d:  no closing quotation mark\n", lineNumber); BEGIN(INITIAL); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 259 "lex.l"
{
	removeChar(yytext, str, '_');
	printf("DECIMAL_NUMBER: %d\n", atoi(str));
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 264 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("BIN_NUMBER: %d\n", strtol(str + 2, NULL, 2));
    }
    else
    {
       printf("Error: incorrect format for DECIMAL_NUMBER\n");
    }
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 277 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("OCTAL_NUMBER: %d\n", strtol(str + 2, NULL, 8));
    }
    else
    {
        printf("Error: incorrect format for OCTAL_NUMBER\n");
    }
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 290 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("HEXADEMICAL_NUMBER: %d\n", strtol(str + 2, NULL, 16));
    }
    else
    {
        printf("Error: incorrect format for HEXADEMICAL_NUMBER\n");
    }
}
	YY_BREAK
case 184:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 303 "lex.l"
{ 
	removeChar(yytext, str, '_');
    printf("DECIMAL_FLOATINGPOINT_NUMBER: %f\n", atof(str));
}
	YY_BREAK
case 185:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 308 "lex.l"
{ 
	removeChar(yytext, str, '_');
    printf("HEXADECIMAL_FLOATINGPOINT_NUMBER: %f\n", atof(str));
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 313 "lex.l"
{ printf("Found IDENTIFIER: %s\n", yytext); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 314 "lex.l"
ECHO;
	YY_BREAK
#line 2364 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 733 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 733 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 732);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 314 "lex.l"


void convertCharacterCodeToString(char charCode[], int pos, char *str)
{
    str[0] = strtol(charCode + pos, NULL, 16);
    str[1] = '\0';
}

void removeChar(const char * str, char * dest, char deletedChar) 
{
    int j = 0;

    for (int i = 0; i < strlen(yytext); i++) {
        if (str[i] != deletedChar) {
            dest[j++] = str[i];
        }
    }

    dest[j] = '\0';
}

int main( int argc, char** argv)
{
    if (argc == 2)
    {
        FILE *file = fopen(argv[1], "r");
        if (file == NULL) 
        {
            printf("File opening error");
            return 1;
        }
        yyin = file;
        yylex();
        fclose(file);
        return 0;
    }
    else
    {
        printf("missed commandline argument");
        return 1;
    }
}