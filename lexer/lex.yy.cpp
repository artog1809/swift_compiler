/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 187
#define YY_END_OF_BUFFER 188
static yyconst short int yy_accept[682] =
    {   0,
        0,    0,  160,  160,    0,    0,    0,    0,  188,  187,
        2,    1,  128,  165,  187,  107,  116,  137,  138,  106,
      103,  104,  132,  105,  180,  180,  136,  120,  108,  121,
      187,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  139,  140,  118,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  141,  117,  142,  119,  103,
      104,  132,  180,  180,  186,  160,  161,  162,  166,  167,
      179,  187,    2,  125,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  113,  126,  112,  130,  109,  131,

      110,    0,  159,  164,  111,    0,  180,    0,    0,    0,
      114,  123,  122,  124,  115,  129,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,   46,
      186,  186,  186,  186,  186,  186,   32,  186,  186,  186,
      186,  186,  186,  186,  186,  186,   37,  186,   38,   48,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  127,    0,    0,    0,    0,
      184,    0,  180,    0,    0,    0,  186,  186,  186,  160,
      162,  162,  163,  166,  177,  176,  170,  171,  169,  172,

      168,  173,  174,    0,  175,    0,    0,    0,    0,    0,
        0,    0,    0,   96,    0,    0,    0,    0,    0,    0,
      133,  134,  164,    0,  181,  182,  183,   45,  186,  186,
      186,  186,  150,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,   35,   61,  186,  186,  186,  186,
      186,  186,  186,  186,  186,   13,  186,   49,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,   77,  186,  186,  186,  186,  186,  186,  186,
      186,   55,  186,  186,   25,  186,  186,  186,  186,    0,

        0,    0,    0,  183,  186,  186,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  135,  135,  143,  186,  186,  186,  186,  186,  186,
      146,  186,   51,  186,   79,  155,  186,  186,   27,  186,
      186,  186,  186,  186,  186,  186,  186,  186,   33,    6,
      186,  186,  186,  186,  186,  186,  186,  186,  186,   10,
      186,  186,   64,   65,  186,   67,  186,   14,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,   50,   78,  186,  186,  186,  186,  186,  186,
       54,  186,  186,   81,  186,  186,  186,    0,    0,    0,

        0,    0,    0,   88,    0,    0,   94,    0,    0,    0,
       99,    0,    0,    0,  186,  186,  156,  147,  148,  149,
      186,  186,  186,  186,  186,  151,  186,   26,   28,    4,
      186,  186,  186,   31,  186,  186,  186,  186,  186,   47,
      186,   60,   36,  186,  186,   63,   11,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,   76,  186,  186,  186,   52,  186,   41,
      186,  186,   43,   44,  186,  185,    0,    0,    0,    0,
        0,    0,    0,   89,   90,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  186,  158,  186,  186,  144,  152,

      153,  154,  186,  186,  186,  186,    5,   58,  186,  186,
      186,  186,    9,  186,  186,  186,  186,  186,  186,  186,
      186,  186,   73,  186,  186,   19,   39,  186,  186,   40,
       21,   22,  186,   42,   53,  186,  186,  186,    0,    0,
        0,    0,    0,   85,    0,   87,   91,    0,    0,    0,
        0,    0,    0,    0,    0,  186,  157,  186,  186,  186,
      186,   30,   59,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,   71,  186,   16,  186,  186,  186,  186,
      186,   80,   82,    0,    0,    0,    0,    0,    0,    0,
        0,   98,    0,    0,  102,  186,   74,  186,   29,  186,

      186,  186,  186,   62,   12,   66,  186,   15,   69,   70,
      186,   18,   75,   20,  186,  186,    0,    0,    0,    0,
        0,   93,   95,    0,  100,    0,  145,  186,  186,  186,
        7,  186,  186,  186,  186,   23,   24,  178,   83,    0,
       86,    0,    0,    0,  186,  186,  186,  186,  186,  186,
       72,    0,    0,    0,    0,  186,  186,   57,   34,    8,
       68,  186,    0,   92,    0,    0,  186,  186,  186,   84,
       97,    0,  186,   56,  186,    0,    3,  186,  101,   17,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   22,   24,   25,   26,    1,   27,
       28,   29,   30,    1,   31,   32,   33,   34,   35,   36,
       37,   37,   38,   37,   37,   39,   37,   37,   37,   40,
       37,   37,   41,   42,   43,   37,   37,   44,   37,   37,
       45,   46,   47,   48,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   37,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[79] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    1,    1,    9,    1,    1,
       10,   10,   10,   10,   11,   10,   12,   12,   12,   12,
       12,   12,   12,   12,    1,    3,    1,    1,   13,   10,
       14,   10,   10,   11,   10,   12,   12,   12,   12,   12,
       12,   12,   15,   12,   12,   12,   12,   12,   12,   12,
       12,   15,   12,   12,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[704] =
    {   0,
        0,   66,   89,   90,   91,   92,    0,    0, 1348, 2025,
     1340, 2025, 1311, 2025,   53, 1305, 1294, 2025, 2025, 1268,
       86,   90, 1280,  105,   83,  139, 2025,   82, 1265,   94,
     1256,   67,  104,  116,  117,  120,  121,  125,  126,  128,
      127,  130, 2025, 2025, 2025,  129,  134,  136,  156,  135,
      137,  175,  180,  192,  196,  179,  202,  188,  206,  208,
      224,  225,  215,  221,  227, 2025, 1206, 2025, 2025,  273,
      289,  290,  337,  217,  407,    0, 2025,  114,    0, 2025,
     2025,  327, 1277, 2025, 1196, 1195, 1179,  152,   70,  149,
     1173, 1168,  159, 1170, 2025, 2025, 2025, 2025, 2025, 2025,

     2025,  200, 2025, 1200, 2025, 1199,  301,  214,  384,    0,
     2025, 2025, 2025, 2025, 2025, 2025,  279,  281,  314,  282,
      284,  349,  320,  322,  331,  359,  326,  350,  396,  397,
      398,  400,  327,  401,  402,  406,  336,  420,  405,  421,
      424,  425,  426,  428,  429,  450,  422,  438,  461,  447,
      464,  466,  468,  483,  469,  474,  476,  478,  486,  488,
      492,  497,  505,  518,  532,  535,  536,  540,  543,  544,
      546,  547,  551,  553,  554, 2025,  600,  623,  294,  313,
     2025,  622, 1128,  134, 1125, 1120,    0,  683,    0,    0,
     1110,  267, 2025,    0, 2025, 2025, 2025, 2025, 2025, 2025,

     2025, 2025, 2025, 1046, 2025, 1070, 1045, 1035, 1018, 1026,
     1004, 1001,  998, 2025, 1005,  975,  976,  970,  937,  934,
        0, 2025,  980,  978,  610,  612,    0,  548,  555,  633,
      635,  638,  642,  641,  661,  663,  556,  665,  664,  668,
      640,  670,  677,  666,  696,  705,  708,  709,  714,  713,
      715,  716,  723,  732,  722,  724,  726,  736,  737,  738,
      740,  741,  751,  745,  755,  763,  764,  773,  776,  778,
      783,  782,  786,  787,  794,  800,  796,  801,  802,  804,
      809,  814,  811,  813,  823,  831,  832,  844,  837,  855,
      859,  860,  861,  862,  863,  867,  868,  870,  872,  918,

      928,    0,  970,  969,  492,  561,    0,  924,  157,  923,
      915,  886,  851,  853,  854,  847,  857,  842,  838,  824,
      822, 2025,    0,  873,  874,  905,  910,  879,  941,  880,
      912,  940,  942,  943,  947,  948,  949,  955,  958,  959,
      960,  961,  964,  966,  968,  971,  972,  979,  973,  984,
      987,  996,  997, 1008, 1009, 1010, 1016, 1017, 1022, 1024,
     1027, 1026, 1028, 1029, 1032, 1035, 1037, 1038, 1039, 1041,
     1047, 1052, 1065, 1053, 1059, 1076, 1078, 1082, 1084, 1088,
     1095, 1097, 1100, 1101, 1102, 1103, 1107, 1108, 1114, 1109,
     1113, 1119, 1115, 1123, 1130, 1132, 1126,  508,    0,  819,

      799,  796,  784,  775,  766,  754,  538,  739,  752,  753,
     2025,  732,  728,  703, 1133, 1138, 1173, 1155, 1156, 1158,
     1161, 1163, 1168, 1174, 1175, 1179, 1180, 1183, 1184, 1185,
     1186, 1187, 1191, 1188, 1193, 1194, 1196, 1201, 1203, 1206,
     1210, 1215, 1216, 1224, 1226, 1229, 1232, 1238, 1241, 1242,
     1248, 1252, 1254, 1255, 1256, 1257, 1259, 1268, 1269, 1262,
     1270, 1274, 1273, 1279, 1292, 1283, 1300, 1309, 1310, 1311,
     1316, 1319, 1323, 1325, 1328, 2025,  230,    0,  698,  704,
      680,  678,  680, 2025, 2025,  691,  635,  625,  616,  634,
      604,  602,  615,  606, 1330, 1331, 1335, 1332, 1338, 1339,

     1340, 1341, 1342, 1347, 1348, 1354, 1355, 1356, 1360, 1368,
     1370, 1371, 1378, 1379, 1384, 1386, 1392, 1395, 1396, 1398,
     1400, 1403, 1406, 1410, 1417, 1422, 1424, 1425, 1428, 1435,
     1438, 1439, 1445, 1441, 1446, 1447, 1448, 1453, 1489, 1512,
        0,  613,  605, 2025,  601, 2025, 2025,  584,  523,  527,
      530,  530,  520,  541,  496, 1468, 1455, 1467, 1471, 1470,
     1474, 1476, 1477, 1503, 1525, 1526, 1527, 1529, 1528, 1530,
     1531, 1532, 1533, 1534, 1541, 1536, 1542, 1552, 1544, 1545,
     1550, 1555, 1557,    0,  466,  454,  449,  454,  447,  418,
      398, 2025,  382,  375, 2025, 1558, 1571, 1593, 1595, 1597,

     1599, 1600, 1603, 1601, 1606, 1607, 1608, 1611, 1613, 1614,
     1615, 1616, 1619, 1621, 1622, 1624,  357,  369,  330,  325,
      304, 2025, 2025,  314, 2025,  301, 1623, 1625, 1626, 1628,
     1630, 1639, 1643, 1661, 1666, 1667, 1668, 2025, 2025,  283,
     2025,  297,  277,  277, 1669, 1670, 1672, 1678, 1682, 1683,
     1684,  250,  207,  206,  167, 1685, 1689, 1692, 1693, 1694,
     1697, 1698,  131, 2025,  112,   69, 1699, 1707, 1710, 2025,
     2025,   62, 1729, 1730, 1735,   38, 1736, 1737, 2025, 1738,
     2025, 1804, 1819, 1834, 1843, 1852, 1863, 1876, 1891, 1906,
     1914, 1927, 1936, 1943, 1951, 1958, 1966, 1973, 1980, 1990,

     1996, 2003, 2010
    } ;

static yyconst short int yy_def[704] =
    {   0,
      681,    1,  682,  682,  683,  683,  684,  684,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  685,  681,  681,  681,  681,  681,
      681,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  681,  681,  681,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  681,  681,  681,  681,  687,
      687,  681,  681,   73,  686,  688,  681,  689,  690,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  691,
      681,  681,  681,  681,  681,  681,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  681,  681,  687,  178,  692,
      681,  681,   74,  693,  694,  695,   75,  686,   75,  688,
      689,  689,  681,  690,  681,  681,  681,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      696,  681,  681,  681,  681,  681,  691,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  681,

      681,  697,  694,  695,  188,  188,  698,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  696,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  697,  699,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  681,  700,  701,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  686,  686,  686,  686,  686,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  681,  681,
      702,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  703,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  686,  686,  686,  686,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  681,  681,  681,
      681,  681,  681,  681,  686,  686,  686,  686,  686,  686,
      686,  681,  681,  681,  681,  686,  686,  686,  686,  686,
      686,  686,  681,  681,  681,  681,  686,  686,  686,  681,
      681,  681,  686,  686,  686,  681,  686,  686,  681,  686,
        0,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  681
    } ;

static yyconst short int yy_nxt[2104] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   10,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   26,   26,
       26,   26,   26,   26,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   36,   38,   36,   39,
       40,   41,   42,   36,   43,   10,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   36,   54,   36,   55,
       56,   57,   58,   59,   36,   60,   61,   62,   63,   64,
       65,   36,   36,   36,   66,   67,   68,   69,   70,   71,
       72,  106,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   77,   77,   80,   80,   81,   81,  106,   98,  679,

       78,   78,   85,  100,   86,   87,   88,   89,  111,  112,
       90,   91,   92,   99,   75,  118,  103,  101,  106,   93,
      104,  114,  115,   94,  676,  192,  672,  212,  119,  193,
      106,  106,  105,  108,  106,  106,   82,   82,  213,  106,
      106,  106,  106,  681,  106,  109,  300,  300,  106,  106,
      106,  106,  118,  106,  110,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  118,  118,  120,  129,  118,  118,
      106,  671,  121,  118,  118,  118,  118,  118,  118,  122,
      123,  126,  118,  118,  118,  118,  124,  107,  135,  106,
      670,  125,  136,  106,  106,  127,  139,  137,  140,  128,

      130,  131,  106,  214,  118,  132,  106,  138,  141,  215,
      106,  209,  218,  210,  221,  133,  106,  211,  134,  401,
      106,  219,  106,  118,  142,  402,  222,  118,  118,  106,
      225,  225,  143,  145,  666,  106,  118,  144,  106,  106,
      118,  106,  539,  539,  118,  151,  147,  153,  146,  152,
      118,  156,  148,  149,  118,  665,  118,  157,  150,  154,
      681,  161,  225,  118,  155,  162,  664,  681,  158,  118,
      172,  159,  118,  118,  160,  118,  171,  163,  192,  681,
      173,  168,  193,  174,  175,   98,  164,  177,  681,  178,
      169,  165,  166,  681,  167,  681,  681,  170,  681,  663,

       99,  681,  100,  177,  102,  178,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  181,  101,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  655,  118,  681,  118,
      118,  195,  118,  230,  681,  196,  681,  681,  180,  181,
      681,  681,  654,  197,  229,  681,  653,  184,  652,  107,
      681,  182,  644,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  118,  681,  681,  681,  184,  643,  118,  642,
      118,  184,  198,  681,  118,  118,  243,  199,  641,  118,
      185,  200,  232,  640,  118,  183,  228,  108,  201,  233,
      184,  236,  202,  234,  203,  204,  205,  118,  118,  109,

      226,  226,  226,  226,  226,  226,  226,  118,  186,  181,
      681,  681,  681,  237,  681,  681,  681,  231,  235,  681,
      681,  177,  639,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  226,  638,  681,  681,  681,  626,  681,  681,
      681,  188,  681,  681,  118,  118,  118,  625,  118,  118,
      118,  240,  681,  118,  118,  189,  245,  238,  247,  246,
      188,  681,  244,  239,  681,  624,  241,  242,  118,  118,
      118,  249,  118,  118,  118,  681,  118,  118,  681,  623,
      681,  248,  681,  681,  252,  253,  118,  254,  681,  250,
      681,  251,  681,  255,  181,  118,  256,  681,  118,  257,

      681,  258,  681,  622,  681,  681,  681,  621,  620,  118,
      476,  681,  118,  259,  118,  260,  118,  118,  261,  681,
      265,  619,  118,  262,  118,  618,  118,  270,  263,  272,
      269,  118,  681,  266,  118,  267,  118,  264,  277,  274,
      118,  271,  268,  275,  273,  118,  681,  477,  276,  681,
      681,  595,  281,  118,  681,  278,  279,  681,  681,  280,
      681,  681,  681,  181,  282,  681,  118,  681,  681,  681,
      681,  477,  283,  681,  681,  486,  487,  488,  284,  594,
      118,  285,  593,  118,  118,  287,  592,  591,  118,  590,
      589,  118,  118,  289,  118,  118,  118,  286,  288,  118,

      296,  118,  118,  118,  118,  290,  297,  293,  294,  335,
      298,  291,  295,  299,  324,  292,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  181,  225,  225,  226,  226,
      226,  226,  226,  226,  226,  681,  224,  177,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  681,  180,  681,
      681,  588,  681,  587,  681,  681,  681,  184,  225,  328,
      226,  329,  586,  585,  330,  331,  185,  555,  554,  553,
      180,  552,  551,  550,  549,  681,  184,  681,  681,  681,
      681,  118,  681,  118,  681,  326,  118,  327,  118,  118,
      118,  681,  548,  339,  185,  300,  300,  681,  325,  305,

      305,  305,  305,  305,  305,  305,  305,  305,  332,  118,
      681,  118,  118,  118,  118,  333,  118,  338,  118,  681,
      334,  340,  681,  681,  547,  118,  337,  681,  681,  681,
      681,  306,  336,  342,  546,  343,  681,  681,  681,  545,
      681,  544,  543,  341,  118,  344,  681,  542,  347,  345,
      681,  681,  681,  118,  681,  681,  118,  118,  348,  681,
      494,  118,  118,  118,  118,  681,  346,  349,  351,  681,
      118,  118,  118,  350,  118,  352,  354,  681,  681,  493,
      118,  355,  353,  492,  118,  118,  118,  681,  118,  118,
      681,  356,  681,  118,  358,  359,  681,  681,  357,  118,

      681,  681,  491,  118,  362,  490,  489,  360,  681,  361,
      681,  118,  118,  365,  681,  681,  681,  363,  681,  485,
      484,  118,  364,  681,  118,  681,  118,  681,  681,  366,
      118,  118,  483,  482,  118,  118,  367,  681,  373,  368,
      370,  374,  118,  369,  118,  681,  681,  371,  118,  118,
      118,  681,  118,  372,  378,  377,  481,  118,  681,  118,
      380,  118,  118,  375,  480,  382,  384,  376,  383,  681,
      379,  118,  381,  681,  681,  681,  681,  681,  479,  118,
      118,  681,  681,  414,  681,  118,  681,  681,  681,  413,
      385,  412,  118,  681,  681,  411,  410,  388,  387,  386,

      420,  418,  409,  118,  389,  408,  407,  118,  118,  118,
      118,  118,  391,  406,  392,  118,  118,  390,  118,  681,
      118,  118,  118,  415,  681,  394,  681,  118,  118,  396,
      181,  397,  393,  395,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  405,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  118,  681,  681,  681,  681,  118,  419,
      118,  681,  681,  681,  416,  423,  301,  424,  404,  681,
      425,  426,  681,  681,  681,  681,  301,  417,  681,  403,
      681,  400,  681,  302,  302,  681,  681,  681,  118,  118,
      118,  118,  323,  681,  223,  118,  118,  118,  681,  321,

      427,  681,  421,  118,  422,  320,  118,  118,  118,  118,
      681,  681,  118,  428,  118,  429,  118,  432,  431,  118,
      118,  118,  681,  681,  681,  436,  430,  118,  435,  319,
      681,  681,  118,  434,  433,  118,  681,  318,  681,  437,
      681,  681,  681,  681,  118,  118,  681,  317,  438,  681,
      440,  681,  681,  681,  316,  681,  118,  118,  118,  315,
      314,  681,  443,  439,  118,  118,  681,  681,  442,  313,
      118,  441,  118,  681,  118,  118,  118,  118,  312,  681,
      118,  444,  445,  118,  311,  118,  118,  118,  451,  118,
      681,  448,  681,  446,  447,  118,  681,  310,  681,  449,

      118,  118,  681,  452,  309,  450,  454,  118,  457,  681,
      456,  681,  453,  118,  681,  681,  681,  681,  455,  308,
      307,  681,  681,  681,  118,  681,  118,  681,  681,  681,
      118,  460,  118,  681,  302,  459,  118,  681,  458,  302,
      681,  461,  177,  118,  681,  118,  681,  681,  118,  118,
      118,  118,  681,  462,  466,  118,  118,  118,  467,  465,
      463,  118,  118,  118,  464,  469,  475,  118,  471,  681,
      681,  118,  681,  468,  118,  681,  472,  681,  118,  470,
      118,  118,  681,  473,  495,  474,  118,  681,  681,  681,
      500,  496,  501,  681,  681,  502,  497,  681,  681,  681,

      681,  681,  681,  118,  118,  681,  118,  681,  681,  118,
      681,  118,  498,  224,  223,  681,  118,  681,  499,  220,
      681,  118,  118,  118,  681,  217,  216,  118,  118,  681,
      681,  118,  118,  118,  118,  118,  118,  503,  681,  118,
      681,  118,  118,  681,  118,  208,  681,  504,  505,  118,
      506,  118,  681,  509,  118,  681,  681,  207,  118,  511,
      507,  508,  681,  118,  118,  206,  681,  510,  681,  681,
      681,  681,  118,  681,  118,  512,  681,  118,   83,  514,
      118,  176,  681,  681,  681,  116,  118,  681,  681,  118,
      118,  513,  113,  681,  102,   97,  118,  681,  516,  515,

      118,   96,  118,  118,  118,  118,  681,  118,  522,  517,
      118,  520,  521,  519,  681,  518,  118,  118,  118,  525,
      526,  118,  118,  681,  681,  681,  524,  118,  523,  527,
      681,  118,   95,  681,  530,  528,  529,  681,   84,  681,
      118,   83,  681,  531,  681,  681,  681,  681,  118,  681,
      532,  557,  681,  681,  681,  681,  681,  118,  118,  118,
      681,  681,  681,  681,  118,  533,  534,  118,  681,  681,
      681,  118,  537,  118,  681,  536,  118,  535,  118,  118,
      118,  538,  681,  118,  681,  681,  118,  118,  118,  118,
      118,  559,  681,  681,  558,  118,  118,  556,  681,  681,

      681,  681,  118,  118,  118,  561,  681,  681,  118,  681,
      681,  563,  681,  681,  681,  560,  118,  681,  118,  118,
      681,  562,  681,  681,  681,  564,  118,  118,  566,  681,
      567,  681,  118,  568,  118,  565,  681,  681,  681,  681,
      118,  570,  681,  118,  118,  572,  118,  569,  118,  681,
      573,  118,  681,  681,  118,  681,  575,  571,  118,  681,
      681,  681,  681,  576,  681,  118,  681,  681,  681,  681,
      118,  574,  118,  118,  681,  681,  118,  681,  578,  577,
      681,  681,  681,  118,  681,  681,  118,  118,  681,  118,
      681,  681,  681,  118,  118,  118,  118,  681,  579,  681,

      582,  118,  580,  118,  581,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  476,  118,  118,  681,  118,  118,
      583,  596,  118,  599,  118,  118,  597,  600,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  598,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  118,  681,  681,  681,  681,  681,  681,  681,  681,
      540,  681,  681,  681,  681,  601,  681,  681,  681,  681,
      681,  681,  681,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  606,  118,  681,  610,  602,  605,  118,
      118,  609,  118,  118,  604,  603,  608,  607,  118,  616,

      118,  612,  611,  118,  613,  118,  118,  681,  615,  681,
      614,  681,  681,  681,  681,  681,  681,  681,  681,  118,
      681,  681,  681,  627,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  118,  681,  118,  681,  118,  628,  118,  118,  118,
      629,  118,  633,  681,  118,  118,  118,  681,  630,  118,
      631,  118,  118,  118,  118,  634,  635,  118,  632,  118,
      118,  118,  118,  118,  118,  681,  118,  645,  118,  647,
      681,  681,  681,  681,  681,  681,  681,  118,  681,  636,
      637,  118,  681,  681,  648,  646,  681,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  118,
      649,  681,  681,  681,  118,  118,  118,  118,  118,  651,
      118,  681,  650,  681,  681,  658,  118,  657,  681,  681,
      118,  118,  118,  118,  659,  660,  656,  118,  661,  662,
      118,  118,  118,  681,  681,  118,  118,  118,  681,  681,
      681,  681,  681,  681,  681,  118,  668,  667,  118,  681,
      681,  681,  673,  669,  681,  681,  681,  681,  681,  681,
      681,  681,  675,  681,  681,  681,  681,  118,  118,  674,
      681,  681,  677,  118,  118,  118,  118,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,

      680,  681,  681,  678,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,  107,
      107,  681,  681,  681,  681,  107,  107,  107,  117,  117,
      681,  117,  117,  117,  117,  117,  117,  179,  681,  179,
      179,  179,  681,  681,  681,  179,  190,  681,  190,  681,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  194,  681,  681,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  227,  681,  227,  227,  681,  227,  227,  180,  681,
      681,  681,  681,  681,  180,  681,  681,  180,  681,  180,
      301,  301,  681,  301,  681,  681,  681,  681,  301,  303,
      303,  681,  303,  303,  681,  303,  303,  304,  304,  681,
      304,  304,  681,  304,  304,  322,  681,  322,  322,  322,
      681,  322,  322,  398,  681,  398,  398,  681,  398,  398,
      399,  681,  399,  399,  681,  681,  399,  478,  681,  478,
      478,  681,  681,  478,  540,  540,  681,  540,  681,  681,

      681,  681,  540,  541,  681,  541,  541,  681,  681,  541,
      584,  681,  584,  584,  681,  681,  584,  617,  681,  617,
      617,  681,  681,  617,    9,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  681
    } ;

static yyconst short int yy_chk[2104] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
        2,   32,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    4,    5,    6,    5,    6,   25,   21,  676,

        3,    4,   15,   22,   15,   15,   15,   15,   28,   28,
       15,   15,   15,   21,    2,   32,   24,   22,   33,   15,
       24,   30,   30,   15,  672,   78,  666,   89,   32,   78,
       34,   35,   24,   25,   36,   37,    5,    6,   89,   38,
       39,   41,   40,   46,   42,   25,  184,  184,   47,   50,
       48,   51,   33,   26,   25,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   34,   35,   33,   42,   36,   37,
       49,  665,   34,   38,   39,   41,   40,   46,   42,   35,
       37,   40,   47,   50,   48,   51,   38,   26,   50,   52,
      663,   39,   50,   56,   53,   40,   51,   50,   51,   41,

       47,   48,   58,   90,   49,   49,   54,   50,   51,   90,
       55,   88,   93,   88,  102,   49,   57,   88,   49,  309,
       59,   93,   60,   52,   52,  309,  102,   56,   53,   63,
      108,  108,   52,   53,  655,   64,   58,   52,   61,   62,
       54,   65,  477,  477,   55,   55,   54,   56,   53,   55,
       57,   58,   54,   54,   59,  654,   60,   58,   54,   57,
       74,   60,  108,   63,   57,   60,  653,   74,   59,   64,
       64,   59,   61,   62,   59,   65,   63,   61,  192,   74,
       65,   62,  192,   65,   65,   70,   61,   70,   74,   70,
       62,   61,   61,  117,   61,  118,  120,   62,  121,  652,

       70,   71,   71,   71,   72,   71,   72,   72,   72,   72,
       72,   72,   72,   72,   72,  180,   71,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  644,  117,  119,  118,
      120,   82,  121,  121,  123,   82,  124,  179,   72,   73,
      127,  133,  643,   82,  120,  125,  642,  180,  640,  107,
      137,   73,  626,   73,   73,   73,   73,   73,   73,   73,
       73,   73,  119,  122,  128,  179,  180,  624,  123,  621,
      124,   73,   82,  126,  127,  133,  133,   82,  620,  125,
       73,   82,  123,  619,  137,   73,  119,   73,   82,  124,
       73,  127,   82,  125,   82,   82,   82,  122,  128,   73,

      109,  109,  109,  109,  109,  109,  109,  126,   73,   75,
      129,  130,  131,  128,  132,  134,  135,  122,  126,  139,
      136,   75,  618,   75,   75,   75,   75,   75,   75,   75,
       75,   75,  109,  617,  138,  140,  147,  594,  141,  142,
      143,   75,  144,  145,  129,  130,  131,  593,  132,  134,
      135,  131,  148,  139,  136,   75,  135,  129,  136,  135,
       75,  150,  134,  130,  146,  591,  132,  132,  138,  140,
      147,  139,  141,  142,  143,  149,  144,  145,  151,  590,
      152,  138,  153,  155,  142,  143,  148,  143,  156,  140,
      157,  141,  158,  144,  305,  150,  145,  154,  146,  146,

      159,  148,  160,  589,  305,  305,  161,  588,  587,  149,
      398,  162,  151,  149,  152,  149,  153,  155,  149,  163,
      152,  586,  156,  149,  157,  585,  158,  156,  149,  157,
      155,  154,  164,  152,  159,  153,  160,  151,  160,  159,
      161,  156,  154,  159,  158,  162,  165,  398,  159,  166,
      167,  555,  162,  163,  168,  161,  161,  169,  170,  161,
      171,  172,  228,  306,  163,  173,  164,  174,  175,  229,
      237,  398,  163,  306,  306,  407,  407,  407,  164,  554,
      165,  165,  553,  166,  167,  166,  552,  551,  168,  550,
      549,  169,  170,  167,  171,  172,  228,  165,  166,  173,

      173,  174,  175,  229,  237,  168,  174,  170,  171,  237,
      174,  169,  172,  175,  229,  169,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  178,  225,  225,  226,  226,
      226,  226,  226,  226,  226,  178,  182,  178,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  230,  177,  231,
      178,  548,  232,  545,  241,  234,  233,  178,  225,  233,
      226,  233,  543,  542,  233,  233,  178,  494,  493,  492,
      182,  491,  490,  489,  488,  235,  178,  236,  239,  238,
      244,  230,  240,  231,  242,  231,  232,  232,  241,  234,
      233,  243,  487,  241,  178,  188,  188,  188,  230,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  234,  235,
      245,  236,  239,  238,  244,  235,  240,  240,  242,  246,
      236,  242,  247,  248,  486,  243,  239,  250,  249,  251,
      252,  188,  238,  244,  483,  244,  255,  253,  256,  482,
      257,  481,  480,  243,  245,  245,  254,  479,  247,  245,
      258,  259,  260,  246,  261,  262,  247,  248,  248,  264,
      414,  250,  249,  251,  252,  263,  246,  249,  251,  265,
      255,  253,  256,  250,  257,  252,  253,  266,  267,  413,
      254,  254,  252,  412,  258,  259,  260,  268,  261,  262,
      269,  257,  270,  264,  259,  260,  272,  271,  258,  263,

      273,  274,  410,  265,  263,  409,  408,  261,  275,  262,
      277,  266,  267,  267,  276,  278,  279,  264,  280,  406,
      405,  268,  265,  281,  269,  283,  270,  284,  282,  269,
      272,  271,  404,  403,  273,  274,  269,  285,  274,  270,
      271,  274,  275,  270,  277,  286,  287,  272,  276,  278,
      279,  289,  280,  273,  278,  277,  402,  281,  288,  283,
      280,  284,  282,  275,  401,  281,  284,  276,  282,  290,
      279,  285,  280,  291,  292,  293,  294,  295,  400,  286,
      287,  296,  297,  321,  298,  289,  299,  324,  325,  320,
      285,  319,  288,  328,  330,  318,  317,  288,  287,  286,

      330,  328,  316,  290,  289,  315,  314,  291,  292,  293,
      294,  295,  291,  313,  293,  296,  297,  290,  298,  326,
      299,  324,  325,  325,  327,  296,  331,  328,  330,  298,
      301,  299,  294,  297,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  312,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  326,  332,  329,  333,  334,  327,  329,
      331,  335,  336,  337,  326,  336,  300,  336,  311,  338,
      336,  336,  339,  340,  341,  342,  301,  327,  343,  310,
      344,  308,  345,  304,  303,  346,  347,  349,  332,  329,
      333,  334,  224,  348,  223,  335,  336,  337,  350,  220,

      337,  351,  332,  338,  334,  219,  339,  340,  341,  342,
      352,  353,  343,  338,  344,  340,  345,  343,  342,  346,
      347,  349,  354,  355,  356,  347,  341,  348,  346,  218,
      357,  358,  350,  345,  344,  351,  359,  217,  360,  348,
      362,  361,  363,  364,  352,  353,  365,  216,  351,  366,
      353,  367,  368,  369,  215,  370,  354,  355,  356,  213,
      212,  371,  356,  352,  357,  358,  372,  374,  355,  211,
      359,  354,  360,  375,  362,  361,  363,  364,  210,  373,
      365,  357,  358,  366,  209,  367,  368,  369,  369,  370,
      376,  362,  377,  359,  361,  371,  378,  208,  379,  365,

      372,  374,  380,  370,  207,  367,  372,  375,  375,  381,
      374,  382,  371,  373,  383,  384,  385,  386,  373,  206,
      204,  387,  388,  390,  376,  191,  377,  391,  389,  393,
      378,  378,  379,  392,  186,  377,  380,  394,  376,  185,
      397,  379,  183,  381,  395,  382,  396,  415,  383,  384,
      385,  386,  416,  380,  386,  387,  388,  390,  387,  385,
      381,  391,  389,  393,  382,  389,  397,  392,  392,  418,
      419,  394,  420,  388,  397,  421,  393,  422,  395,  390,
      396,  415,  423,  395,  415,  396,  416,  417,  424,  425,
      423,  416,  424,  426,  427,  425,  417,  428,  429,  430,

      431,  432,  434,  418,  419,  433,  420,  435,  436,  421,
      437,  422,  421,  106,  104,  438,  423,  439,  422,   94,
      440,  417,  424,  425,  441,   92,   91,  426,  427,  442,
      443,  428,  429,  430,  431,  432,  434,  427,  444,  433,
      445,  435,  436,  446,  437,   87,  447,  431,  432,  438,
      433,  439,  448,  437,  440,  449,  450,   86,  441,  439,
      435,  436,  451,  442,  443,   85,  452,  438,  453,  454,
      455,  456,  444,  457,  445,  441,  460,  446,   83,  445,
      447,   67,  458,  459,  461,   31,  448,  463,  462,  449,
      450,  444,   29,  464,   23,   20,  451,  466,  449,  448,

      452,   17,  453,  454,  455,  456,  465,  457,  455,  450,
      460,  453,  454,  452,  467,  451,  458,  459,  461,  458,
      459,  463,  462,  468,  469,  470,  457,  464,  456,  460,
      471,  466,   16,  472,  463,  461,  462,  473,   13,  474,
      465,   11,  475,  465,  495,  496,  498,    9,  467,  497,
      466,  497,  499,  500,  501,  502,  503,  468,  469,  470,
        0,  504,  505,    0,  471,  467,  469,  472,  506,  507,
      508,  473,  472,  474,  509,  471,  475,  470,  495,  496,
      498,  475,  510,  497,  511,  512,  499,  500,  501,  502,
      503,  503,  513,  514,  498,  504,  505,  495,  515,    0,

      516,    0,  506,  507,  508,  505,  517,    0,  509,  518,
      519,  509,  520,    0,  521,  504,  510,  522,  511,  512,
      523,  506,    0,    0,  524,  510,  513,  514,  512,    0,
      514,  525,  515,  515,  516,  511,  526,    0,  527,  528,
      517,  517,  529,  518,  519,  519,  520,  516,  521,  530,
      520,  522,  531,  532,  523,  534,  522,  518,  524,  533,
      535,  536,  537,  524,    0,  525,    0,  538,    0,  557,
      526,  521,  527,  528,    0,    0,  529,    0,  528,  525,
        0,  558,  556,  530,  560,  559,  531,  532,  561,  534,
      562,  563,    0,  533,  535,  536,  537,    0,  529,    0,

      537,  538,  533,  557,  536,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  540,  558,  556,  564,  560,  559,
      538,  556,  561,  560,  562,  563,  558,  561,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  539,  559,  565,
      566,  567,  569,  568,  570,  571,  572,  573,  574,    0,
      576,  564,    0,    0,    0,  575,  577,    0,  579,  580,
      540,    0,    0,    0,  581,  564,  578,    0,    0,  582,
        0,  583,  596,  565,  566,  567,  569,  568,  570,  571,
      572,  573,  574,  569,  576,  597,  573,  565,  568,  575,
      577,  572,  579,  580,  567,  566,  571,  570,  581,  581,

      578,  577,  575,  582,  578,  583,  596,  598,  580,  599,
      579,  600,    0,  601,  602,  604,    0,  603,    0,  597,
      605,  606,  607,  596,    0,  608,    0,  609,  610,  611,
      612,    0,    0,  613,    0,  614,  615,  627,  616,  628,
      629,  598,  630,  599,  631,  600,  598,  601,  602,  604,
      598,  603,  603,  632,  605,  606,  607,  633,  600,  608,
      601,  609,  610,  611,  612,  607,  611,  613,  602,  614,
      615,  627,  616,  628,  629,  634,  630,  628,  631,  630,
      635,  636,  637,  645,  646,    0,  647,  632,    0,  615,
      616,  633,  648,    0,  632,  629,  649,  650,  651,  656,

        0,    0,    0,  657,    0,    0,  658,  659,  660,  634,
      633,  661,  662,  667,  635,  636,  637,  645,  646,  635,
      647,  668,  634,    0,  669,  647,  648,  646,    0,    0,
      649,  650,  651,  656,  648,  649,  645,  657,  650,  651,
      658,  659,  660,  673,  674,  661,  662,  667,    0,  675,
      677,  678,  680,    0,    0,  668,  657,  656,  669,    0,
        0,    0,  667,  662,    0,    0,    0,    0,    0,    0,
        0,    0,  669,    0,    0,    0,    0,  673,  674,  668,
        0,    0,  673,  675,  677,  678,  680,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      678,    0,    0,  675,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  685,
      685,    0,    0,    0,    0,  685,  685,  685,  686,  686,
        0,  686,  686,  686,  686,  686,  686,  687,    0,  687,
      687,  687,    0,    0,    0,  687,  688,    0,  688,    0,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  690,    0,    0,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  691,    0,  691,  691,    0,  691,  691,  692,    0,
        0,    0,    0,    0,  692,    0,    0,  692,    0,  692,
      693,  693,    0,  693,    0,    0,    0,    0,  693,  694,
      694,    0,  694,  694,    0,  694,  694,  695,  695,    0,
      695,  695,    0,  695,  695,  696,    0,  696,  696,  696,
        0,  696,  696,  697,    0,  697,  697,    0,  697,  697,
      698,    0,  698,  698,    0,    0,  698,  699,    0,  699,
      699,    0,    0,  699,  700,  700,    0,  700,    0,    0,

        0,    0,  700,  701,    0,  701,  701,    0,    0,  701,
      702,    0,  702,  702,    0,    0,  702,  703,    0,  703,
      703,    0,    0,  703,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  681
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "lex.l"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define MULTILINE_COMMENT 1

#define STRING 2

#define CHAR 3

#line 15 "lex.l"
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <iostream>
    #include <string>
    #include <ctype.h>
    using namespace std;
#line 1076 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 24 "lex.l"



    void convertCharacterCodeToString(char charCode[], int pos, char *str);
    void removeChar(const char * str, char * dest, char deletedChar);
	
	
	char str[1024];
	string stdstr = "";
	int lineNumber = 1;  
	


#line 1240 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 682 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2025 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 37 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 38 "lex.l"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 41 "lex.l"
{printf("(%s) - ASSOCIATEDTYPE_KEY_WORD\n", yytext);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 42 "lex.l"
{printf("(%s) - CLASS_KEY_WORD\n", yytext);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 43 "lex.l"
{printf("(%s) - DEINIT_KEY_WORD\n", yytext);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 44 "lex.l"
{printf("(%s) - ENUM_KEY_WORD\n", yytext);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 45 "lex.l"
{printf("(%s) - EXTENSION_KEY_WORD\n", yytext);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 46 "lex.l"
{printf("(%s) - FILEPRIVATE_KEY_WORD\n", yytext);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 47 "lex.l"
{printf("(%s) - IMPORT_KEY_WORD\n", yytext);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "lex.l"
{printf("(%s) - INIT_KEY_WORD\n", yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 49 "lex.l"
{printf("(%s) - INOUT_KEY_WORD\n", yytext);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 50 "lex.l"
{printf("(%s) - INTERNAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 51 "lex.l"
{printf("(%s) - LET_KEY_WORD\n", yytext);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 52 "lex.l"
{printf("(%s) - OPEN_KEY_WORD\n", yytext);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 53 "lex.l"
{printf("(%s) - OPERATOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 54 "lex.l"
{printf("(%s) - PRIVATE_KEY_WORD\n", yytext);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 55 "lex.l"
{printf("(%s) - PRECEDENCEGROUP_KEY_WORD\n", yytext);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 56 "lex.l"
{printf("(%s) - PROTOCOL_KEY_WORD\n", yytext);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 57 "lex.l"
{printf("(%s) - PUBLIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 58 "lex.l"
{printf("(%s) - RETHROWS_KEY_WORD\n", yytext);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 59 "lex.l"
{printf("(%s) - STATIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 60 "lex.l"
{printf("(%s) - STRUCT_KEY_WORD\n", yytext);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 61 "lex.l"
{printf("(%s) - SUBSCRIPT_KEY_WORD\n", yytext);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 62 "lex.l"
{printf("(%s) - TYPEALIAS_KEY_WORD\n", yytext);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 63 "lex.l"
{printf("(%s) - VAR_KEY_WORD\n", yytext);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 66 "lex.l"
{printf("(%s) - BREAK_KEY_WORD\n", yytext);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 67 "lex.l"
{printf("(%s) - CASE_KEY_WORD\n", yytext);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 68 "lex.l"
{printf("(%s) - CATCH_KEY_WORD\n", yytext);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 69 "lex.l"
{printf("(%s) - CONTINUE_KEY_WORD\n", yytext);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 70 "lex.l"
{printf("(%s) - DEFAULT_KEY_WORD\n", yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 71 "lex.l"
{printf("(%s) - DEFER_KEY_WORD\n", yytext);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 72 "lex.l"
{printf("(%s) - DO_KEY_WORD\n", yytext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 73 "lex.l"
{printf("(%s) - ELSE_KEY_WORD\n", yytext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 74 "lex.l"
{printf("(%s) - FALLTHROUGH_KEY_WORD\n", yytext);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 75 "lex.l"
{printf("(%s) - FOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 76 "lex.l"
{printf("(%s) - GUARD_KEY_WORD\n", yytext);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 77 "lex.l"
{printf("(%s) - IF_KEY_WORD\n", yytext);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 78 "lex.l"
{printf("(%s) - IN_KEY_WORD\n", yytext);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 79 "lex.l"
{printf("(%s) - REPEAT_KEY_WORD\n", yytext);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 80 "lex.l"
{printf("(%s) - RETURN_KEY_WORD\n", yytext);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 81 "lex.l"
{printf("(%s) - THROW_KEY_WORD\n", yytext);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 82 "lex.l"
{printf("(%s) - SWITCH_KEY_WORD\n", yytext);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 83 "lex.l"
{printf("(%s) - WHERE_KEY_WORD\n", yytext);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 84 "lex.l"
{printf("(%s) - WHILE_KEY_WORD\n", yytext);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 86 "lex.l"
{printf("(%s) - ANY_KEY_WORD\n", yytext);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 87 "lex.l"
{printf("(%s) - AS_KEY_WORD\n", yytext);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 88 "lex.l"
{printf("(%s) - FALSE_KEY_WORD\n", yytext);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 89 "lex.l"
{printf("(%s) - IS_KEY_WORD\n", yytext);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 90 "lex.l"
{printf("(%s) - NIL_KEY_WORD\n", yytext);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 91 "lex.l"
{printf("(%s) - SELF_KEY_WORD\n", yytext);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 92 "lex.l"
{printf("(%s) - SELF_KEY_WORD\n", yytext);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 93 "lex.l"
{printf("(%s) - SUPER_KEY_WORD\n", yytext);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 94 "lex.l"
{printf("(%s) - THROWS_KEY_WORD\n", yytext);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 95 "lex.l"
{printf("(%s) - TRUE_KEY_WORD\n", yytext);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 96 "lex.l"
{printf("(%s) - TRY_KEY_WORD\n", yytext);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 99 "lex.l"
{printf("(%s) - ASSOCIATIVITY_KEY_WORD\n", yytext);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 100 "lex.l"
{printf("(%s) - CONVENIENCE_KEY_WORD\n", yytext);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 101 "lex.l"
{printf("(%s) - DIDSET_KEY_WORD\n", yytext);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 102 "lex.l"
{printf("(%s) - DYNAMIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 103 "lex.l"
{printf("(%s) - FINAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 104 "lex.l"
{printf("(%s) - GET_KEY_WORD\n", yytext);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 105 "lex.l"
{printf("(%s) - INDIRECT_KEY_WORD\n", yytext);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 106 "lex.l"
{printf("(%s) - INFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 107 "lex.l"
{printf("(%s) - LAZY_KEY_WORD\n", yytext);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 108 "lex.l"
{printf("(%s) - LEFT_KEY_WORD\n", yytext);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 109 "lex.l"
{printf("(%s) - MUTATING_KEY_WORD\n", yytext);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 110 "lex.l"
{printf("(%s) - NONE_KEY_WORD\n", yytext);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 111 "lex.l"
{printf("(%s) - NONMUTATING_KEY_WORD\n", yytext);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 112 "lex.l"
{printf("(%s) - OPTIONAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 113 "lex.l"
{printf("(%s) - OVERRIDE_KEY_WORD\n", yytext);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 114 "lex.l"
{printf("(%s) - POSTFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 115 "lex.l"
{printf("(%s) - PRECEDENCE_KEY_WORD\n", yytext);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 116 "lex.l"
{printf("(%s) - PREFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 117 "lex.l"
{printf("(%s) - PROTOCOL_KEY_WORD\n", yytext);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 118 "lex.l"
{printf("(%s) - REQUIRED_KEY_WORD\n", yytext);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 119 "lex.l"
{printf("(%s) - RIGHT_KEY_WORD\n", yytext);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 120 "lex.l"
{printf("(%s) - SET_KEY_WORD\n", yytext);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 121 "lex.l"
{printf("(%s) - SOME_KEY_WORD\n", yytext);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 122 "lex.l"
{printf("(%s) - TYPE_KEY_WORD\n", yytext);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 123 "lex.l"
{printf("(%s) - UNOWNED_KEY_WORD\n", yytext);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 124 "lex.l"
{printf("(%s) - WEAK_KEY_WORD\n", yytext);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 125 "lex.l"
{printf("(%s) - WILLSET_KEY_WORD\n", yytext);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 128 "lex.l"
{printf("(%s) - #AVAILABLE_KEY_WORD\n", yytext);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 129 "lex.l"
{printf("(%s) - #COLORLITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 130 "lex.l"
{printf("(%s) - #COLUMN_KEY_WORD\n", yytext);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 131 "lex.l"
{printf("(%s) - #DSOHANDLE_KEY_WORD\n", yytext);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 132 "lex.l"
{printf("(%s) - #ELSEIF_WORD\n", yytext);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 133 "lex.l"
{printf("(%s) - #ELSE_WORD\n", yytext);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 134 "lex.l"
{printf("(%s) - #ENDIF_KEY_WORD\n", yytext);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 135 "lex.l"
{printf("(%s) - #ERROR_KEY_WORD\n", yytext);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 136 "lex.l"
{printf("(%s) - #FILEID_KEY_WORD\n", yytext);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 137 "lex.l"
{printf("(%s) - #FILELITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 138 "lex.l"
{printf("(%s) - #FILEPATH_KEY_WORD\n", yytext);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 139 "lex.l"
{printf("(%s) - #FILE_KEY_WORD\n", yytext);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 140 "lex.l"
{printf("(%s) - #FUNCTION_KEY_WORD\n", yytext);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 141 "lex.l"
{printf("(%s) - #IF_WORD\n", yytext);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 142 "lex.l"
{printf("(%s) - #IMAGELITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 143 "lex.l"
{printf("(%s) - #KEYPATH_KEY_WORD\n", yytext);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 144 "lex.l"
{printf("(%s) - #LINE_KEY_WORD\n", yytext);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 145 "lex.l"
{printf("(%s) - #SELECTOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 146 "lex.l"
{printf("(%s) - #SOURCELOCATION_KEY_WORD\n", yytext);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 147 "lex.l"
{printf("(%s) - #WARNING_KEY_WORD\n", yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 150 "lex.l"
{ printf("Found OPERATOR_PLUS: %s\n", yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 151 "lex.l"
{ printf("Found OPERATOR_MINUS: %s\n", yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 152 "lex.l"
{ printf("Found OPERATOR_DIVISION: %s\n", yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 153 "lex.l"
{ printf("Found OPERATOR_MULTIPLICATION: %s\n", yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 154 "lex.l"
{ printf("Found OPERATOR_MODULUS: %s\n", yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 157 "lex.l"
{ printf("Found OPERATOR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 158 "lex.l"
{ printf("Found OPERATOR_PLUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 159 "lex.l"
{ printf("Found OPERATOR_MINUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 160 "lex.l"
{ printf("Found OPERATOR_DIVIDE_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 161 "lex.l"
{ printf("Found OPERATOR_MUTIPLY_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 162 "lex.l"
{ printf("Found OPERATOR_MODULUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 165 "lex.l"
{ printf("Found OPERATOR_LEFT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 166 "lex.l"
{ printf("Found OPERATOR_RIGHT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 167 "lex.l"
{ printf("Found OPERATOR_BINARY_AND: %s\n", yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 168 "lex.l"
{ printf("Found OPERATOR_BINARY_OR: %s\n", yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 169 "lex.l"
{ printf("Found OPERATOR_BINARY_XOR: %s\n", yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 170 "lex.l"
{ printf("Found OPERATOR_TILDE: %s\n", yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 173 "lex.l"
{ printf("Found OPERATOR_LESS: %s\n", yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 174 "lex.l"
{ printf("Found OPERATOR_GREATER: %s\n", yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 175 "lex.l"
{ printf("Found OPERATOR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 176 "lex.l"
{ printf("Found OPERATOR_LESS_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 177 "lex.l"
{ printf("Found OPERATOR_GREATER_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 178 "lex.l"
{ printf("Found OPERATOR_NOT_EQUAL: %s\n", yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 181 "lex.l"
{ printf("Found OPERATOR_LOGICAL_AND: %s\n", yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 182 "lex.l"
{ printf("Found OPERATOR_LOGICAL_OR: %s\n", yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 183 "lex.l"
{ printf("Found OPERATOR_LOGICAL_NOT: %s\n", yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 186 "lex.l"
{ printf("Found OPERATOR_NIL_COALESCING: %s\n", yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 187 "lex.l"
{ printf("Found OPERATOR_INCREMENT: %s\n", yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 188 "lex.l"
{ printf("Found OPERATOR_DECREMENT: %s\n", yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "lex.l"
{ printf("Found OPERATOR_POINT: %s\n", yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "lex.l"
{ printf("Found OPERATOR_CLOSED_RANGE: %s\n", yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "lex.l"
{ printf("Found OPERATOR_HALF_OPEN_RANGE: %s\n", yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "lex.l"
{ printf("Found OPERATOR_ONE_SIDED_RANGE: %s\n", yytext); } 
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "lex.l"
{ printf("Found OPERATOR_COLON: %s\n", yytext); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "lex.l"
{ printf("Found LEFT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "lex.l"
{ printf("Found RIGHT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "lex.l"
{ printf("Found LEFT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "lex.l"
{ printf("Found RIGHT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "lex.l"
{ printf("Found LEFT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "lex.l"
{ printf("Found RIGHT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 205 "lex.l"
{ printf("Found TYPE_BOOL: %s\n", yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 206 "lex.l"
{ printf("Found TYPE_STRING: %s\n", yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 207 "lex.l"
{ printf("Found TYPE_CHARACTER: %s\n", yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 208 "lex.l"
{ printf("Found TYPE_INT8: %s\n", yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 209 "lex.l"
{ printf("Found TYPE_INT16: %s\n", yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 210 "lex.l"
{ printf("Found TYPE_INT32: %s\n", yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 211 "lex.l"
{ printf("Found TYPE_INT64: %s\n", yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 212 "lex.l"
{ printf("Found TYPE_INT: %s\n", yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 213 "lex.l"
{ printf("Found TYPE_UINT8: %s\n", yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 214 "lex.l"
{ printf("Found TYPE_UINT16: %s\n", yytext); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 215 "lex.l"
{ printf("Found TYPE_UINT32: %s\n", yytext); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 216 "lex.l"
{ printf("Found TYPE_UINT64: %s\n", yytext); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 217 "lex.l"
{ printf("Found TYPE_UINT: %s\n", yytext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 218 "lex.l"
{ printf("Found TYPE_FLOAT: %s\n", yytext); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 219 "lex.l"
{ printf("Found TYPE_FLOAT80: %s\n", yytext); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 220 "lex.l"
{ printf("Found TYPE_DOUBLE: %s\n", yytext); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 222 "lex.l"
{strcpy(str, ""); BEGIN(MULTILINE_COMMENT);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 223 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 224 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 225 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 226 "lex.l"
{ printf("Found MULTILINE_COMMENT: %s\n", str); BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(MULTILINE_COMMENT):
#line 227 "lex.l"
{ printf("MULTILINE_COMMENT ERROR in line %d: comment are not closed\n"); BEGIN(INITIAL); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 229 "lex.l"
{ printf("Found ONELINE_COMMENT: %s\n", yytext); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 231 "lex.l"
{ stdstr = ""; BEGIN(STRING); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 232 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 233 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 234 "lex.l"
{ stdstr += "\n"; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 235 "lex.l"
{ stdstr += "\b"; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 236 "lex.l"
{ stdstr += "\0"; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 237 "lex.l"
{ stdstr += "\\"; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 238 "lex.l"
{ stdstr += "\f"; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 239 "lex.l"
{ stdstr += "\r"; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 240 "lex.l"
{ stdstr += "\t"; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 241 "lex.l"
{ stdstr += "\v"; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 242 "lex.l"
{ stdstr += "\'"; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 243 "lex.l"
{ stdstr += "\""; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 244 "lex.l"
{
    char *a;
    int x = strtol(yytext + 3, &a, 16);
    if (x <= 127) {
        char buf[2];
        buf[0] = x;
        buf[1] = 0;
		stdstr += buf;
    } else {
        printf("Eror in %d: unicode not supported\n", lineNumber);
    }
 } 
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 256 "lex.l"
{ std::cout << "STRING: " << stdstr << std::endl; BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 257 "lex.l"
{ printf("Error in %d:  no closing quotation mark\n", lineNumber); BEGIN(INITIAL); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 259 "lex.l"
{
	removeChar(yytext, str, '_');
	printf("DECIMAL_NUMBER: %d\n", atoi(str));
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 264 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("BIN_NUMBER: %d\n", strtol(str + 2, NULL, 2));
    }
    else
    {
       printf("Error: incorrect format for DECIMAL_NUMBER\n");
    }
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 277 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("OCTAL_NUMBER: %d\n", strtol(str + 2, NULL, 8));
    }
    else
    {
        printf("Error: incorrect format for OCTAL_NUMBER\n");
    }
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 290 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("HEXADEMICAL_NUMBER: %d\n", strtol(str + 2, NULL, 16));
    }
    else
    {
        printf("Error: incorrect format for HEXADEMICAL_NUMBER\n");
    }
}
	YY_BREAK
case 184:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 303 "lex.l"
{ 
	removeChar(yytext, str, '_');
    printf("DECIMAL_FLOATINGPOINT_NUMBER: %f\n", atof(str));
}
	YY_BREAK
case 185:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 308 "lex.l"
{ 
	removeChar(yytext, str, '_');
    printf("HEXADECIMAL_FLOATINGPOINT_NUMBER: %f\n", atof(str));
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 313 "lex.l"
{ printf("Found IDENTIFIER: %s\n", yytext); }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 314 "lex.l"
ECHO;
	YY_BREAK
#line 2326 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 682 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 682 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 681);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 314 "lex.l"


void convertCharacterCodeToString(char charCode[], int pos, char *str)
{
    str[0] = strtol(charCode + pos, NULL, 16);
    str[1] = '\0';
}

void removeChar(const char * str, char * dest, char deletedChar) 
{
    int j = 0;

    for (int i = 0; i < strlen(yytext); i++) {
        if (str[i] != deletedChar) {
            dest[j++] = str[i];
        }
    }

    dest[j] = '\0';
}

int main( int argc, char** argv)
{
    if (argc == 2)
    {
        FILE *file = fopen(argv[1], "r");
        if (file == NULL) 
        {
            printf("File opening error");
            return 1;
        }
        yyin = file;
        yylex();
        fclose(file);
        return 0;
    }
    else
    {
        printf("missed commandline argument");
        return 1;
    }
}