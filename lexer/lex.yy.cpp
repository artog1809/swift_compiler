#line 1 "lex.yy.cpp"

#line 3 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 199
#define YY_END_OF_BUFFER 200
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[701] =
    {   0,
        0,    0,    0,    0,  161,  161,    0,    0,    0,    0,
      200,  199,    2,    1,  128,  177,  199,  107,  116,  138,
      139,  106,  103,  133,  104,  132,  105,  192,  192,  137,
      120,  108,  121,  199,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  140,  141,  118,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  142,  117,
      143,  119,  103,  104,  132,  192,  192,  198,  167,  168,
      167,  167,  161,  162,  163,  178,  179,  191,  199,    2,
      125,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  113,  126,  112,  130,  109,  131,  110,    0,
      160,  165,  111,    0,  192,    0,    0,    0,  114,  123,
      122,  124,  115,  129,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,   46,  198,  198,
      198,  198,  198,  198,   32,  198,  198,  198,  198,  198,
      198,  198,  198,  198,   37,  198,   38,   48,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  127,    0,    0,    0,    0,  196,    0,
      192,    0,    0,    0,  198,  198,  198,  175,  170,  171,

      169,  161,  163,  163,  164,  178,  189,  188,  182,  183,
      181,  184,  180,  185,  186,    0,  187,  166,    0,    0,
        0,    0,    0,    0,    0,    0,   96,    0,    0,    0,
        0,    0,    0,  134,  135,  165,    0,  193,  194,  195,
       45,  198,  198,  198,  198,  151,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,   35,   61,  198,
      198,  198,  198,  198,  198,  198,  198,  198,   13,  198,
       49,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,   77,  198,  198,  198,  198,

      198,  198,  198,  198,   55,  198,  198,   25,  198,  198,
      198,  198,    0,    0,    0,    0,  195,  198,  198,  176,
      172,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  136,  136,  144,
      198,  198,  198,  198,  198,  198,  147,  198,   51,  198,
       79,  156,  198,  198,   27,  198,  198,  198,  198,  198,
      198,  198,  198,  198,   33,    6,  198,  198,  198,  198,
      198,  198,  198,  198,  198,   10,  198,  198,   64,   65,
      198,   67,  198,   14,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,   50,   78,

      198,  198,  198,  198,  198,  198,   54,  198,  198,   81,
      198,  198,  198,    0,  173,    0,    0,    0,    0,    0,
        0,   88,    0,    0,   94,    0,    0,    0,   99,    0,
        0,    0,  198,  198,  157,  148,  149,  150,  198,  198,
      198,  198,  198,  152,  198,   26,   28,    4,  198,  198,
      198,   31,  198,  198,  198,  198,  198,   47,  198,   60,
       36,  198,  198,   63,   11,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,   76,  198,  198,  198,   52,  198,   41,  198,  198,
       43,   44,  198,  197,    0,  174,    0,    0,    0,    0,

        0,    0,   89,   90,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  198,  159,  198,  198,  145,  153,  154,
      155,  198,  198,  198,  198,    5,   58,  198,  198,  198,
      198,    9,  198,  198,  198,  198,  198,  198,  198,  198,
      198,   73,  198,  198,   19,   39,  198,  198,   40,   21,
       22,  198,   42,   53,  198,  198,  198,    0,    0,    0,
        0,    0,   85,    0,   87,   91,    0,    0,    0,    0,
        0,    0,    0,    0,  198,  158,  198,  198,  198,  198,
       30,   59,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,   71,  198,   16,  198,  198,  198,  198,  198,

       80,   82,    0,    0,    0,    0,    0,    0,    0,    0,
       98,    0,    0,  102,  198,   74,  198,   29,  198,  198,
      198,  198,   62,   12,   66,  198,   15,   69,   70,  198,
       18,   75,   20,  198,  198,    0,    0,    0,    0,    0,
       93,   95,    0,  100,    0,  146,  198,  198,  198,    7,
      198,  198,  198,  198,   23,   24,  190,   83,    0,   86,
        0,    0,    0,  198,  198,  198,  198,  198,  198,   72,
        0,    0,    0,    0,  198,  198,   57,   34,    8,   68,
      198,    0,   92,    0,    0,  198,  198,  198,   84,   97,
        0,  198,   56,  198,    0,    3,  198,  101,   17,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   24,   26,   27,   28,    1,   29,
       30,   31,   32,    1,   33,   34,   35,   36,   37,   38,
       39,   39,   40,   39,   39,   41,   39,   39,   39,   42,
       39,   39,   43,   44,   45,   39,   39,   46,   39,   39,
       47,   48,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   39,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[81] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    4,    5,    1,    6,    7,    1,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    9,
        1,    1,   10,   10,   10,   10,   11,   10,   12,   12,
       12,   12,   12,   12,   12,   12,    1,    3,    1,    1,
       13,   10,   14,   10,   10,   11,   10,   12,   12,   12,
       12,   12,   12,   12,   15,   12,   12,   12,   12,   12,
       12,   12,   12,   15,   12,   12,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[725] =
    {   0,
        0,   67,   92,   96,   94,   98,   79,  100,    0,    0,
     1401, 2067, 1388, 2067, 1350, 1335,   60, 1301, 1319, 2067,
     2067, 1294,   94, 2067,  107, 1287,  112,   93,  130, 2067,
      102, 1273,  104, 1266,  109,  111,  119,  121,  124,  126,
      128,  142,  144,  146,  147, 2067, 2067, 2067,  148,  151,
      154,  165,  168,  167,  174,  152,  187,  184,  194,  195,
      196,  198,  220,  231,  235,  241,  237,  255, 2067, 1215,
     2067, 2067,  260,  302,  303,  352,  285,  424, 2067, 2067,
     1257,  184,    0, 2067,  246,    0, 2067, 2067,  342, 1258,
     2067, 1248, 1169, 1147, 1124,  229,  136,   56, 1116, 1093,

      118, 1079, 2067, 2067, 2067, 2067, 2067, 2067, 2067,  244,
     2067,    0, 2067, 1108,  409,  288,  343,    0, 2067, 2067,
     2067, 2067, 2067, 2067,  258,  261,  266,  282,  283,  329,
      319,  332,  336,  334,  341,  371,  340,  369,  365,  401,
      402,  408,  406,  407,  364,  422,  423,  425,  438,  439,
      447,  448,  451,  452,  461,  462,  467,  464,  466,  468,
      478,  483,  480,  490,  503,  488,  513,  519,  516,  489,
      526,  534,  538,  541,  533,  536,  544,  548,  551,  549,
      557,  562,  559, 2067,  604,  629,  196,  598, 2067,  657,
     1095,  326, 1078, 1067,    0,  695,    0, 1076,  247, 2067,

     2067,    0, 1057,  464, 2067,    0, 2067, 2067, 2067, 2067,
     2067, 2067, 2067, 2067, 2067,  994, 2067, 2067, 1010,  998,
      990,  950,  951,  936,  940,  936, 2067,  940,  916,  924,
      925,  891,  870,    0, 2067,    0,  920,  561,  617,    0,
      554,  594,  636,  616,  640,  673,  635,  643,  646,  645,
      656,  672,  693,  685,  696,  708,  710,  711,  714,  713,
      717,  715,  721,  723,  725,  732,  734,  722,  738,  740,
      741,  753,  758,  764,  773,  776,  778,  779,  780,  784,
      782,  794,  788,  786,  790,  797,  808,  800,  803,  804,
      823,  809,  825,  826,  830,  844,  846,  847,  852,  853,

      854,  858,  861,  865,  869,  873,  874,  876,  882,  883,
      884,  890,  934,  945,    0,  919,  901,  916,  928, 2067,
      908,  907,    0,  851,  272,  849,  838,  832,  824,  832,
      829,  810,  796,  772,  767,  754,  755, 2067,    0,  889,
      898,  922,  928,  957,  959,  958,  946,  960,  961,  966,
      969,  996,  972,  973,  976,  977,  982,  978,  984,  986,
      988,  990,  997,  998, 1014, 1015, 1025, 1026, 1027, 1028,
     1029, 1035, 1037, 1041, 1042, 1046, 1047, 1050, 1051, 1052,
     1053, 1055, 1056, 1057, 1068, 1064, 1070, 1082, 1093, 1083,
     1094, 1096, 1097, 1107, 1105, 1109, 1111, 1113, 1115, 1118,

     1120, 1119, 1124, 1123, 1133, 1125, 1134, 1137, 1135, 1146,
     1150, 1151, 1165, 1152, 2067,  810,    0,  750,  742,  739,
      748,  738,  703,  686,  607,  683,  696,  696, 2067,  689,
      681,  673, 1173, 1164, 1178, 1175, 1179, 1183, 1186, 1188,
     1192, 1193, 1196, 1194, 1204, 1205, 1206, 1208, 1211, 1214,
     1215, 1216, 1218, 1219, 1221, 1225, 1231, 1232, 1233, 1234,
     1235, 1236, 1241, 1244, 1251, 1254, 1256, 1257, 1262, 1274,
     1263, 1279, 1282, 1283, 1292, 1293, 1294, 1295, 1298, 1302,
     1300, 1303, 1304, 1305, 1309, 1312, 1319, 1318, 1323, 1325,
     1333, 1335, 1342, 2067,  477, 2067,    0,  677,  647,  608,

      607,  613, 2067, 2067,  629,  604,  609,  598,  610,  580,
      574,  578,  556, 1344, 1351, 1354, 1355, 1362, 1365, 1366,
     1371, 1372, 1374, 1375, 1377, 1379, 1380, 1382, 1383, 1386,
     1390, 1387, 1395, 1401, 1391, 1410, 1393, 1412, 1415, 1422,
     1423, 1431, 1434, 1440, 1442, 1443, 1448, 1450, 1451, 1452,
     1455, 1458, 1459, 1460, 1461, 1464, 1463, 1505, 1517,    0,
      550,  538, 2067,  536, 2067, 2067,  505,  493,  497,  496,
      493,  484,  494,  468, 1466, 1483, 1496, 1499, 1528, 1529,
     1531, 1532, 1535, 1536, 1537, 1538, 1540, 1545, 1542, 1543,
     1544, 1548, 1546, 1554, 1547, 1559, 1564, 1556, 1573, 1575,

     1596, 1597,    0,  461,  444,  448,  438,  429,  423,  397,
     2067,  343,  342, 2067, 1599, 1600, 1603, 1605, 1606, 1611,
     1613, 1614, 1617, 1618, 1620, 1621, 1623, 1625, 1626, 1628,
     1627, 1629, 1632, 1635, 1638,  318,  337,  304,  300,  277,
     2067, 2067,  288, 2067,  259, 1636, 1641, 1643, 1644, 1668,
     1671, 1673, 1674, 1676, 1680, 1682, 2067, 2067,  230, 2067,
      233,  216,  229, 1683, 1684, 1685, 1686, 1691, 1697, 1699,
      215,  195,  157,  136, 1689, 1695, 1700, 1701, 1703, 1709,
     1711,  127, 2067,  118,  106, 1722, 1732, 1739, 2067, 2067,
       74, 1741, 1742, 1744,   40, 1749, 1750, 2067, 1751, 2067,

     1816, 1831, 1846, 1861, 1870, 1879, 1890, 1903, 1918, 1933,
     1948, 1956, 1969, 1978, 1985, 1993, 2000, 2008, 2015, 2022,
     2032, 2038, 2045, 2052
    } ;

static const flex_int16_t yy_def[725] =
    {   0,
      700,    1,  701,  701,  702,  702,  703,  703,  704,  704,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  705,  700,  700,
      700,  700,  700,  700,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  700,  700,  700,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  700,  700,
      700,  700,  707,  707,  700,  700,   76,  706,  700,  700,
      700,  700,  708,  700,  709,  710,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  711,  700,  700,  700,  700,  700,  712,  700,  700,
      700,  700,  700,  700,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  700,  700,  707,  186,  713,  700,  700,
       77,  714,  715,  716,   78,  706,   78,  700,  700,  700,

      700,  708,  709,  709,  700,  710,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  717,  700,  711,  700,  700,  700,  712,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,

      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  700,  700,  718,  715,  716,  196,  196,  700,
      700,  700,  719,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  717,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,

      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  718,  700,  700,  720,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  700,  721,  700,  722,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  700,  700,  723,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,

      706,  706,  724,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  700,  700,  700,  700,
      700,  700,  700,  706,  706,  706,  706,  706,  706,  706,
      700,  700,  700,  700,  706,  706,  706,  706,  706,  706,
      706,  700,  700,  700,  700,  706,  706,  706,  700,  700,
      700,  706,  706,  706,  700,  706,  706,  700,  706,    0,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700
    } ;

static const flex_int16_t yy_nxt[2148] =
    {   0,
       12,   13,   14,   12,   15,   16,   17,   18,   19,   12,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       29,   29,   29,   29,   29,   29,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   39,   41,
       39,   42,   43,   44,   45,   39,   46,   12,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   39,   57,
       39,   58,   59,   60,   61,   62,   39,   63,   64,   65,
       66,   67,   68,   39,   39,   39,   69,   70,   71,   72,
       73,   87,   74,   75,   88,   76,   77,   77,   77,   77,
       77,   77,   77,   77,   80,   80,   84,   81,   80,   80,

       84,   81,   87,  698,   12,   88,   85,  106,   12,  114,
       85,   93,  227,   94,   95,   96,   97,   78,  228,   98,
       99,  100,  108,  107,  111,  114,   89,  114,  101,  112,
      119,  120,  102,  122,  123,  114,  109,  114,  695,   82,
      114,  113,  114,   82,  114,  116,  114,   89,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  117,  114,  126,
      114,  126,  114,  114,  700,  691,  118,  114,  114,  126,
      114,  126,  127,  231,  126,  128,  126,  129,  126,  690,
      115,  114,  232,  114,  114,  130,  137,  131,  689,  199,
      114,  132,  126,  200,  126,  225,  126,  126,  126,  134,

      114,  126,  126,  114,  126,  685,  226,  153,  684,  133,
      114,  114,  114,  135,  114,  126,  140,  126,  126,  138,
      136,  139,  154,  143,  126,  150,  141,  144,  147,  142,
      148,  201,  145,  151,  126,  159,  114,  126,  152,  160,
      149,  700,  146,  155,  126,  126,  126,  114,  126,  156,
      157,  114,  321,  114,  162,  158,  683,  114,  204,  163,
      234,  164,  166,  205,  161,  167,  682,  165,  168,  700,
      126,  114,  235,  106,  700,  169,  185,  700,  186,  170,
      674,  126,  700,  673,  672,  126,  171,  126,  180,  107,
      222,  126,  223,  176,  322,  172,  224,  671,  700,  700,

      173,  174,  177,  175,  179,  126,  238,  238,  126,  178,
      181,  126,  663,  182,  183,  700,  126,  108,  185,  110,
      186,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      700,  109,  126,  126,  243,  700,  419,  700,  238,  313,
      241,  313,  420,  662,  661,  700,  242,  207,  700,  700,
      700,  208,  700,  188,  189,  660,  700,  700,  700,  659,
      209,  239,  239,  239,  239,  239,  239,  239,  190,  126,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  126,
      700,  700,  126,  245,  126,  700,  126,  700,  192,  210,
      126,  126,  658,  239,  211,  248,  657,  193,  212,  244,

      247,  246,  191,  251,  116,  213,  645,  192,  249,  214,
      644,  215,  216,  217,  126,  126,  117,  700,  700,  126,
      253,  126,  700,  700,  700,  194,  189,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  250,  252,  700,  700,
      185,  700,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  126,  126,  256,  700,  700,  126,  126,  126,  115,
      196,  260,  258,  700,  700,  259,  643,  700,  700,  254,
      255,  257,  126,  126,  197,  126,  204,  700,  700,  196,
      700,  205,  700,  700,  700,  261,  642,  641,  126,  126,
      558,  262,  558,  640,  700,  263,  700,  126,  126,  700,

      265,  126,  126,  270,  700,  700,  700,  264,  266,  639,
      267,  126,  126,  638,  126,  268,  126,  126,  126,  700,
      269,  272,  637,  273,  278,  614,  274,  271,  126,  700,
      126,  275,  700,  126,  613,  700,  276,  279,  126,  126,
      126,  277,  700,  282,  281,  283,  294,  280,  612,  700,
      700,  611,  700,  126,  700,  610,  286,  700,  285,  284,
      700,  609,  608,  126,  700,  700,  126,  700,  287,  126,
      700,  290,  288,  700,  607,  700,  126,  289,  700,  238,
      238,  291,  292,  126,  126,  293,  126,  295,  126,  298,
      606,  126,  302,  300,  126,  296,  297,  605,  126,  126,

      189,  126,  604,  303,  126,  299,  301,  126,  309,  126,
      700,  238,  126,  306,  304,  307,  308,  310,  305,  574,
      312,  311,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  189,  700,  573,  192,  239,  239,  239,  239,  239,
      239,  239,  700,  572,  126,  185,  505,  506,  507,  571,
      570,  700,  700,  192,  188,  340,  700,  569,  700,  700,
      568,  700,  700,  567,  566,  192,  126,  239,  342,  565,
      564,  563,  700,  237,  193,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  192,  126,  126,  562,  700,  700,
      126,  343,  344,  126,  345,  126,  126,  346,  347,  349,

      351,  700,  193,  341,  348,  350,  126,  188,  313,  700,
      313,  700,  700,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  126,  126,  700,  352,  700,  700,  561,  700,
      700,  700,  513,  700,  512,  126,  353,  700,  700,  700,
      355,  700,  511,  126,  354,  319,  126,  510,  700,  356,
      700,  509,  508,  504,  700,  363,  700,  700,  126,  503,
      126,  126,  360,  126,  126,  126,  361,  126,  364,  700,
      365,  126,  126,  126,  700,  126,  357,  362,  367,  358,
      700,  359,  126,  366,  126,  371,  368,  370,  126,  700,
      126,  126,  700,  369,  700,  700,  700,  502,  700,  501,

      700,  500,  700,  126,  700,  373,  700,  372,  126,  499,
      700,  498,  374,  700,  126,  496,  700,  375,  432,  700,
      700,  431,  430,  126,  700,  700,  126,  429,  126,  126,
      126,  378,  126,  376,  126,  381,  126,  428,  126,  700,
      126,  700,  700,  377,  126,  386,  700,  126,  380,  382,
      126,  384,  379,  126,  126,  385,  383,  387,  126,  126,
      700,  389,  700,  700,  390,  393,  388,  427,  700,  700,
      700,  391,  392,  126,  700,  126,  126,  700,  394,  395,
      126,  700,  426,  396,  398,  700,  399,  425,  424,  700,
      700,  423,  700,  422,  126,  397,  126,  126,  700,  700,

      700,  400,  126,  126,  126,  700,  700,  421,  126,  404,
      418,  126,  416,  415,  700,  126,  401,  315,  189,  126,
      407,  403,  402,  126,  126,  406,  126,  405,  408,  700,
      189,  700,  126,  126,  126,  315,  339,  337,  700,  126,
      126,  700,  410,  700,  700,  412,  409,  189,  126,  433,
      411,  413,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  336,  700,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  126,  700,  700,  700,  700,  700,  126,  437,
      438,  436,  700,  434,  314,  700,  335,  334,  700,  700,
      333,  332,  700,  700,  700,  314,  126,  435,  700,  331,

      700,  330,  700,  329,  700,  328,  700,  126,  126,  126,
      126,  126,  700,  700,  700,  441,  126,  442,  327,  126,
      443,  444,  126,  126,  439,  445,  126,  126,  126,  440,
      700,  700,  126,  446,  126,  447,  126,  449,  126,  450,
      126,  700,  700,  700,  700,  700,  126,  126,  126,  453,
      448,  700,  454,  700,  326,  452,  451,  700,  700,  325,
      455,  324,  700,  700,  126,  126,  700,  700,  700,  700,
      323,  700,  700,  700,  700,  126,  126,  126,  126,  126,
      700,  320,  458,  315,  700,  126,  700,  126,  456,  461,
      460,  126,  126,  459,  315,  457,  126,  126,  700,  700,

      126,  126,  126,  126,  462,  126,  126,  126,  463,  700,
      700,  185,  700,  700,  126,  464,  465,  466,  126,  469,
      126,  700,  467,  700,  237,  700,  468,  700,  470,  700,
      233,  700,  126,  126,  700,  700,  700,  471,  472,  700,
      700,  700,  474,  126,  126,  475,  126,  126,  473,  700,
      700,  700,  230,  700,  494,  126,  477,  126,  478,  126,
      476,  126,  700,  126,  479,  126,  700,  700,  126,  126,
      126,  229,  484,  126,  126,  126,  480,  485,  481,  483,
      700,  700,  482,  126,  126,  126,  487,  126,  489,  700,
      486,  700,  221,  495,  700,  700,  126,  488,  490,  700,

      126,  126,  700,  516,  700,  491,  492,  493,  700,  700,
      700,  220,  700,  520,  126,  126,  519,  495,  521,  515,
      700,  700,  700,  126,  700,  126,  514,  700,  126,  126,
      700,  700,  700,  126,  700,  700,  126,  700,  126,  517,
      219,  700,  126,  126,  126,  518,  126,  700,  700,  700,
      700,  700,  700,  218,  126,  126,  126,  700,  126,   90,
      700,  126,  198,  522,  126,  126,  126,  700,  126,  126,
      700,  126,  700,  700,  523,  126,  525,  524,  700,  700,
      528,  126,  126,  126,  126,  126,  126,  526,  527,  530,
      700,  126,  184,  529,  126,  700,  533,  124,  700,  700,

      531,  126,  121,  110,  126,  532,  126,  126,  700,  700,
      700,  700,  126,  126,  700,  535,  700,  534,  700,  700,
      700,  700,  539,  105,  126,  700,  536,  104,  700,  126,
      103,  537,  126,  126,  700,  700,  541,  538,  540,  700,
       92,  700,  126,  126,  126,  126,  544,  545,  126,  700,
      126,  700,  126,  126,  126,  126,  542,  550,  700,  126,
      700,  543,  126,  549,  546,  547,  548,  700,  126,  126,
      700,  700,  576,  126,  551,  126,  552,  553,  700,   91,
      556,  700,  700,  126,  555,  126,  554,  700,  700,   90,
      700,  700,  126,  700,  126,  700,  700,  557,  700,  700,

      700,  126,  700,  700,  126,  126,  700,  700,  700,  700,
      700,  700,  126,  575,  700,  126,  126,  700,  700,  577,
      700,  126,  126,  578,  126,  126,  700,  126,  700,  126,
      126,  700,  126,  126,  580,  582,  126,  126,  700,  700,
      126,  126,  583,  126,  579,  126,  581,  700,  586,  585,
      700,  126,  587,  584,  588,  700,  700,  590,  700,  700,
      126,  589,  126,  591,  700,  126,  700,  700,  700,  592,
      700,  700,  126,  126,  700,  700,  700,  700,  594,  700,
      700,  126,  700,  700,  126,  700,  700,  700,  700,  595,
      126,  700,  126,  126,  700,  593,  700,  700,  126,  700,

      126,  126,  126,  597,  596,  126,  700,  700,  126,  126,
      126,  126,  700,  126,  126,  700,  126,  599,  601,  494,
      600,  615,  598,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  602,  126,  700,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  700,  700,  126,  700,  700,  126,
      700,  700,  700,  700,  700,  559,  700,  616,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  559,  617,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  126,  126,
      700,  126,  126,  618,  619,  126,  126,  126,  126,  700,
      126,  700,  126,  126,  126,  126,  126,  126,  126,  620,

      621,  624,  625,  629,  126,  628,  126,  623,  622,  126,
      627,  626,  700,  700,  126,  700,  700,  630,  632,  700,
      631,  700,  700,  126,  633,  126,  635,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  634,  700,
      700,  700,  700,  700,  700,  700,  126,  126,  700,  126,
      126,  700,  700,  126,  700,  126,  126,  700,  647,  700,
      700,  126,  648,  126,  126,  652,  646,  126,  126,  649,
      126,  126,  700,  126,  650,  126,  126,  126,  126,  126,
      653,  654,  126,  651,  700,  126,  126,  700,  126,  700,
      700,  126,  700,  126,  126,  664,  700,  666,  700,  700,

      700,  700,  700,  700,  655,  700,  656,  700,  700,  700,
      700,  700,  700,  700,  665,  700,  700,  700,  126,  700,
      700,  126,  700,  126,  126,  700,  126,  700,  667,  700,
      126,  670,  126,  126,  126,  126,  126,  669,  700,  126,
      677,  126,  668,  676,  678,  126,  679,  126,  700,  126,
      126,  126,  675,  126,  680,  700,  681,  700,  700,  126,
      700,  126,  700,  686,  687,  700,  700,  700,  700,  700,
      700,  700,  126,  700,  700,  700,  700,  700,  688,  700,
      700,  700,  126,  700,  700,  700,  700,  692,  700,  126,
      700,  126,  126,  700,  126,  700,  696,  700,  700,  126,

      126,  126,  700,  694,  700,  700,  693,  700,  700,  700,
      700,  700,  700,  700,  697,  699,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,  115,  115,  700,  700,
      700,  700,  115,  115,  115,  125,  125,  700,  125,  125,
      125,  125,  125,  125,  187,  700,  187,  187,  187,  700,

      700,  700,  187,  202,  700,  202,  700,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  206,  700,  700,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  236,  700,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  240,  700,  240,  240,  700,  240,  240,
      188,  700,  700,  700,  700,  700,  188,  700,  700,  188,
      700,  188,  314,  314,  700,  314,  700,  700,  700,  700,
      314,  316,  316,  700,  316,  316,  700,  316,  316,  317,

      317,  700,  317,  317,  700,  317,  317,  338,  700,  338,
      338,  338,  700,  338,  338,  414,  700,  414,  414,  700,
      414,  414,  417,  700,  417,  417,  700,  700,  417,  497,
      700,  497,  497,  700,  700,  497,  559,  559,  700,  559,
      700,  700,  700,  700,  559,  560,  700,  560,  560,  700,
      700,  560,  603,  700,  603,  603,  700,  700,  603,  636,
      700,  636,  636,  700,  700,  636,   11,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700
    } ;

static const flex_int16_t yy_chk[2148] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    7,    2,    2,    7,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    3,    5,    3,    4,    4,

        6,    4,    8,  695,    3,    8,    5,   23,    4,   28,
        6,   17,   98,   17,   17,   17,   17,    2,   98,   17,
       17,   17,   25,   23,   27,   35,    7,   36,   17,   27,
       31,   31,   17,   33,   33,   37,   25,   38,  691,    3,
       39,   27,   40,    4,   41,   28,   29,    8,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   28,   42,   35,
       43,   36,   44,   45,   49,  685,   28,   50,   56,   37,
       51,   38,   35,  101,   39,   36,   40,   37,   41,  684,
       29,   52,  101,   54,   53,   38,   45,   40,  682,   82,
       55,   41,   42,   82,   43,   97,   44,   45,   49,   43,

       58,   50,   56,   57,   51,  674,   97,   56,  673,   42,
       59,   60,   61,   43,   62,   52,   52,   54,   53,   50,
       44,   51,   56,   53,   55,   55,   52,   53,   54,   52,
       54,   82,   53,   55,   58,   58,   63,   57,   55,   58,
       54,  187,   53,   57,   59,   60,   61,   64,   62,   57,
       57,   65,  199,   67,   60,   57,  672,   66,   85,   60,
      110,   61,   62,   85,   59,   62,  671,   61,   62,  187,
       63,   68,  110,   73,  125,   63,   73,  126,   73,   63,
      663,   64,  127,  662,  661,   65,   64,   67,   67,   73,
       96,   66,   96,   65,  199,   64,   96,  659,  128,  129,

       64,   64,   65,   64,   66,   68,  116,  116,  125,   65,
       68,  126,  645,   68,   68,   74,  127,   74,   74,   75,
       74,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       77,   74,  128,  129,  129,  131,  325,   77,  116,  192,
      127,  192,  325,  643,  640,  130,  128,   89,  132,   77,
      134,   89,  133,   75,   76,  639,  137,  135,   77,  638,
       89,  117,  117,  117,  117,  117,  117,  117,   76,  131,
       76,   76,   76,   76,   76,   76,   76,   76,   76,  130,
      145,  139,  132,  131,  134,  138,  133,  136,   76,   89,
      137,  135,  637,  117,   89,  134,  636,   76,   89,  130,

      133,  132,   76,  137,   76,   89,  613,   76,  135,   89,
      612,   89,   89,   89,  145,  139,   76,  140,  141,  138,
      139,  136,  143,  144,  142,   76,   78,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  136,  138,  146,  147,
       78,  148,   78,   78,   78,   78,   78,   78,   78,   78,
       78,  140,  141,  141,  149,  150,  143,  144,  142,  115,
       78,  144,  143,  151,  152,  143,  610,  153,  154,  140,
      140,  142,  146,  147,   78,  148,  204,  155,  156,   78,
      158,  204,  159,  157,  160,  146,  609,  608,  149,  150,
      495,  147,  495,  607,  161,  148,  163,  151,  152,  162,

      150,  153,  154,  154,  166,  170,  164,  149,  151,  606,
      151,  155,  156,  605,  158,  152,  159,  157,  160,  165,
      153,  157,  604,  157,  160,  574,  157,  156,  161,  167,
      163,  157,  169,  162,  573,  168,  157,  160,  166,  170,
      164,  159,  171,  163,  162,  164,  170,  161,  572,  175,
      172,  571,  176,  165,  173,  570,  166,  174,  165,  164,
      177,  569,  568,  167,  178,  180,  169,  179,  167,  168,
      241,  168,  167,  181,  567,  183,  171,  167,  182,  238,
      238,  169,  169,  175,  172,  169,  176,  171,  173,  173,
      564,  174,  175,  174,  177,  171,  172,  562,  178,  180,

      188,  179,  561,  176,  241,  173,  174,  181,  181,  183,
      242,  238,  182,  178,  177,  179,  180,  182,  177,  513,
      183,  182,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  186,  244,  512,  188,  239,  239,  239,  239,  239,
      239,  239,  186,  511,  242,  186,  425,  425,  425,  510,
      509,  247,  243,  188,  185,  242,  245,  508,  186,  248,
      507,  250,  249,  506,  505,  186,  244,  239,  244,  502,
      501,  500,  251,  190,  186,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  186,  247,  243,  499,  252,  246,
      245,  245,  246,  248,  246,  250,  249,  246,  246,  248,

      250,  254,  186,  243,  247,  249,  251,  190,  196,  253,
      196,  196,  255,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  252,  246,  256,  251,  257,  258,  498,  260,
      259,  262,  432,  261,  431,  254,  252,  263,  268,  264,
      254,  265,  430,  253,  253,  196,  255,  428,  266,  255,
      267,  427,  426,  424,  269,  260,  270,  271,  256,  423,
      257,  258,  258,  260,  259,  262,  258,  261,  261,  272,
      262,  263,  268,  264,  273,  265,  256,  259,  264,  257,
      274,  257,  266,  263,  267,  267,  265,  266,  269,  275,
      270,  271,  276,  265,  277,  278,  279,  422,  281,  421,

      280,  420,  284,  272,  283,  271,  285,  270,  273,  419,
      282,  418,  272,  286,  274,  416,  288,  273,  337,  289,
      290,  336,  335,  275,  287,  292,  276,  334,  277,  278,
      279,  276,  281,  274,  280,  280,  284,  333,  283,  291,
      285,  293,  294,  275,  282,  284,  295,  286,  278,  282,
      288,  283,  277,  289,  290,  283,  282,  285,  287,  292,
      296,  287,  297,  298,  287,  290,  286,  332,  299,  300,
      301,  288,  289,  291,  302,  293,  294,  303,  291,  292,
      295,  304,  331,  293,  294,  305,  295,  330,  329,  306,
      307,  328,  308,  327,  296,  293,  297,  298,  309,  310,

      311,  297,  299,  300,  301,  340,  312,  326,  302,  301,
      324,  303,  322,  321,  341,  304,  298,  317,  318,  305,
      304,  300,  299,  306,  307,  303,  308,  302,  306,  318,
      319,  318,  309,  310,  311,  316,  237,  233,  342,  340,
      312,  319,  309,  319,  343,  311,  307,  314,  341,  341,
      310,  312,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  232,  347,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  342,  344,  346,  345,  348,  349,  343,  345,
      346,  344,  350,  342,  313,  351,  231,  230,  353,  354,
      229,  228,  355,  356,  358,  314,  347,  343,  357,  226,

      359,  225,  360,  224,  361,  223,  362,  344,  346,  345,
      348,  349,  352,  363,  364,  352,  350,  352,  222,  351,
      352,  352,  353,  354,  348,  353,  355,  356,  358,  350,
      365,  366,  357,  354,  359,  356,  360,  358,  361,  359,
      362,  367,  368,  369,  370,  371,  352,  363,  364,  362,
      357,  372,  363,  373,  221,  361,  360,  374,  375,  220,
      364,  219,  376,  377,  365,  366,  378,  379,  380,  381,
      216,  382,  383,  384,  203,  367,  368,  369,  370,  371,
      386,  198,  369,  194,  385,  372,  387,  373,  367,  372,
      371,  374,  375,  370,  193,  368,  376,  377,  388,  390,

      378,  379,  380,  381,  373,  382,  383,  384,  374,  389,
      391,  191,  392,  393,  386,  375,  377,  378,  385,  385,
      387,  395,  381,  394,  114,  396,  383,  397,  386,  398,
      102,  399,  388,  390,  400,  402,  401,  387,  388,  404,
      403,  406,  390,  389,  391,  391,  392,  393,  389,  405,
      407,  409,  100,  408,  414,  395,  393,  394,  394,  396,
      392,  397,  410,  398,  395,  399,  411,  412,  400,  402,
      401,   99,  402,  404,  403,  406,  396,  403,  397,  401,
      434,  413,  398,  405,  407,  409,  405,  408,  408,  433,
      404,  436,   95,  414,  435,  437,  410,  406,  409,  438,

      411,  412,  439,  435,  440,  411,  412,  413,  441,  442,
      444,   94,  443,  442,  434,  413,  441,  414,  443,  434,
      445,  446,  447,  433,  448,  436,  433,  449,  435,  437,
      450,  451,  452,  438,  453,  454,  439,  455,  440,  439,
       93,  456,  441,  442,  444,  440,  443,  457,  458,  459,
      460,  461,  462,   92,  445,  446,  447,  463,  448,   90,
      464,  449,   81,  445,  450,  451,  452,  465,  453,  454,
      466,  455,  467,  468,  449,  456,  451,  450,  469,  471,
      455,  457,  458,  459,  460,  461,  462,  453,  454,  457,
      470,  463,   70,  456,  464,  472,  463,   34,  473,  474,

      459,  465,   32,   26,  466,  462,  467,  468,  475,  476,
      477,  478,  469,  471,  479,  467,  481,  466,  480,  482,
      483,  484,  471,   22,  470,  485,  468,   19,  486,  472,
       18,  469,  473,  474,  488,  487,  473,  470,  472,  489,
       16,  490,  475,  476,  477,  478,  476,  477,  479,  491,
      481,  492,  480,  482,  483,  484,  474,  483,  493,  485,
      514,  475,  486,  481,  478,  479,  480,  515,  488,  487,
      516,  517,  516,  489,  484,  490,  485,  487,  518,   15,
      490,  519,  520,  491,  489,  492,  488,  521,  522,   13,
      523,  524,  493,  525,  514,  526,  527,  493,  528,  529,

       11,  515,  530,  532,  516,  517,  531,  535,    0,  537,
        0,  533,  518,  514,    0,  519,  520,  534,    0,  517,
        0,  521,  522,  522,  523,  524,  536,  525,  538,  526,
      527,  539,  528,  529,  524,  528,  530,  532,  540,  541,
      531,  535,  529,  537,  523,  533,  525,  542,  533,  531,
      543,  534,  534,  530,  535,    0,  544,  537,  545,  546,
      536,  536,  538,  538,  547,  539,  548,  549,  550,  539,
        0,  551,  540,  541,  552,  553,  554,  555,  541,  557,
      556,  542,  575,    0,  543,    0,    0,    0,    0,  543,
      544,    0,  545,  546,    0,  540,    0,    0,  547,  576,

      548,  549,  550,  547,  544,  551,    0,    0,  552,  553,
      554,  555,  577,  557,  556,  578,  575,  552,  556,  559,
      555,  575,  548,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  557,  576,    0,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  579,  580,  577,  581,  582,  578,
        0,  583,  584,  585,  586,  558,  587,  577,  589,  590,
      591,  588,  593,  595,  592,    0,    0,  559,  578,    0,
      594,    0,  598,    0,    0,  596,    0,    0,  579,  580,
      597,  581,  582,  579,  580,  583,  584,  585,  586,  599,
      587,  600,  589,  590,  591,  588,  593,  595,  592,  583,

      584,  587,  588,  592,  594,  591,  598,  586,  585,  596,
      590,  589,  601,  602,  597,  615,  616,  594,  597,  617,
      596,  618,  619,  599,  598,  600,  600,  620,    0,  621,
      622,    0,    0,  623,  624,    0,  625,  626,  599,  627,
        0,  628,  629,  631,  630,  632,  601,  602,  633,  615,
      616,  634,  646,  617,  635,  618,  619,  647,  617,  648,
      649,  620,  617,  621,  622,  622,  615,  623,  624,  619,
      625,  626,    0,  627,  620,  628,  629,  631,  630,  632,
      626,  630,  633,  621,  650,  634,  646,  651,  635,  652,
      653,  647,  654,  648,  649,  647,  655,  649,  656,  664,

      665,  666,  667,    0,  634,  675,  635,  668,    0,    0,
        0,  676,    0,  669,  648,  670,  677,  678,  650,  679,
        0,  651,    0,  652,  653,  680,  654,  681,  651,    0,
      655,  654,  656,  664,  665,  666,  667,  653,  686,  675,
      666,  668,  652,  665,  667,  676,  668,  669,  687,  670,
      677,  678,  664,  679,  669,  688,  670,  692,  693,  680,
      694,  681,    0,  675,  676,  696,  697,  699,    0,    0,
        0,    0,  686,    0,    0,    0,    0,    0,  681,    0,
        0,    0,  687,    0,    0,    0,    0,  686,    0,  688,
        0,  692,  693,    0,  694,    0,  692,    0,    0,  696,

      697,  699,    0,  688,    0,    0,  687,    0,    0,    0,
        0,    0,    0,    0,  694,  697,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  705,  705,    0,    0,
        0,    0,  705,  705,  705,  706,  706,    0,  706,  706,
      706,  706,  706,  706,  707,    0,  707,  707,  707,    0,

        0,    0,  707,  708,    0,  708,    0,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  710,    0,    0,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  711,    0,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  712,    0,  712,  712,    0,  712,  712,
      713,    0,    0,    0,    0,    0,  713,    0,    0,  713,
        0,  713,  714,  714,    0,  714,    0,    0,    0,    0,
      714,  715,  715,    0,  715,  715,    0,  715,  715,  716,

      716,    0,  716,  716,    0,  716,  716,  717,    0,  717,
      717,  717,    0,  717,  717,  718,    0,  718,  718,    0,
      718,  718,  719,    0,  719,  719,    0,    0,  719,  720,
        0,  720,  720,    0,    0,  720,  721,  721,    0,  721,
        0,    0,    0,    0,  721,  722,    0,  722,  722,    0,
        0,  722,  723,    0,  723,  723,    0,    0,  723,  724,
        0,  724,  724,    0,    0,  724,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex.l"




#line 16 "lex.l"
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <iostream>
    #include <string>
    #include <ctype.h>
    using namespace std;
#line 1168 "lex.yy.cpp"
#line 1169 "lex.yy.cpp"

#define INITIAL 0
#define MULTILINE_STRING 1
#define MULTILINE_COMMENT 2
#define STRING 3
#define CHAR 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			yy_size_t yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 25 "lex.l"



#line 29 "lex.l"
    void convertCharacterCodeToString(char charCode[], int pos, char *str);
    void removeChar(const char * str, char * dest, char deletedChar);
	
	
	char str[1024];
	string stdstr = "";
	int lineNumber = 1;  
    int multilineNumberBegin = 0;
	


#line 1409 "lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 701 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 700 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 40 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 41 "lex.l"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 44 "lex.l"
{printf("(%s) - ASSOCIATEDTYPE_KEY_WORD\n", yytext);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 45 "lex.l"
{printf("(%s) - CLASS_KEY_WORD\n", yytext);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 46 "lex.l"
{printf("(%s) - DEINIT_KEY_WORD\n", yytext);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 47 "lex.l"
{printf("(%s) - ENUM_KEY_WORD\n", yytext);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 48 "lex.l"
{printf("(%s) - EXTENSION_KEY_WORD\n", yytext);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 49 "lex.l"
{printf("(%s) - FILEPRIVATE_KEY_WORD\n", yytext);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 50 "lex.l"
{printf("(%s) - IMPORT_KEY_WORD\n", yytext);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 51 "lex.l"
{printf("(%s) - INIT_KEY_WORD\n", yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 52 "lex.l"
{printf("(%s) - INOUT_KEY_WORD\n", yytext);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 53 "lex.l"
{printf("(%s) - INTERNAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 54 "lex.l"
{printf("(%s) - LET_KEY_WORD\n", yytext);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 55 "lex.l"
{printf("(%s) - OPEN_KEY_WORD\n", yytext);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 56 "lex.l"
{printf("(%s) - OPERATOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 57 "lex.l"
{printf("(%s) - PRIVATE_KEY_WORD\n", yytext);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 58 "lex.l"
{printf("(%s) - PRECEDENCEGROUP_KEY_WORD\n", yytext);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 59 "lex.l"
{printf("(%s) - PROTOCOL_KEY_WORD\n", yytext);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 60 "lex.l"
{printf("(%s) - PUBLIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 61 "lex.l"
{printf("(%s) - RETHROWS_KEY_WORD\n", yytext);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 62 "lex.l"
{printf("(%s) - STATIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 63 "lex.l"
{printf("(%s) - STRUCT_KEY_WORD\n", yytext);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 64 "lex.l"
{printf("(%s) - SUBSCRIPT_KEY_WORD\n", yytext);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 65 "lex.l"
{printf("(%s) - TYPEALIAS_KEY_WORD\n", yytext);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 66 "lex.l"
{printf("(%s) - VAR_KEY_WORD\n", yytext);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 69 "lex.l"
{printf("(%s) - BREAK_KEY_WORD\n", yytext);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 70 "lex.l"
{printf("(%s) - CASE_KEY_WORD\n", yytext);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 71 "lex.l"
{printf("(%s) - CATCH_KEY_WORD\n", yytext);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 72 "lex.l"
{printf("(%s) - CONTINUE_KEY_WORD\n", yytext);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 73 "lex.l"
{printf("(%s) - DEFAULT_KEY_WORD\n", yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 74 "lex.l"
{printf("(%s) - DEFER_KEY_WORD\n", yytext);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 75 "lex.l"
{printf("(%s) - DO_KEY_WORD\n", yytext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 76 "lex.l"
{printf("(%s) - ELSE_KEY_WORD\n", yytext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 77 "lex.l"
{printf("(%s) - FALLTHROUGH_KEY_WORD\n", yytext);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 78 "lex.l"
{printf("(%s) - FOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 79 "lex.l"
{printf("(%s) - GUARD_KEY_WORD\n", yytext);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 80 "lex.l"
{printf("(%s) - IF_KEY_WORD\n", yytext);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 81 "lex.l"
{printf("(%s) - IN_KEY_WORD\n", yytext);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 82 "lex.l"
{printf("(%s) - REPEAT_KEY_WORD\n", yytext);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 83 "lex.l"
{printf("(%s) - RETURN_KEY_WORD\n", yytext);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 84 "lex.l"
{printf("(%s) - THROW_KEY_WORD\n", yytext);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 85 "lex.l"
{printf("(%s) - SWITCH_KEY_WORD\n", yytext);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 86 "lex.l"
{printf("(%s) - WHERE_KEY_WORD\n", yytext);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 87 "lex.l"
{printf("(%s) - WHILE_KEY_WORD\n", yytext);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 89 "lex.l"
{printf("(%s) - ANY_KEY_WORD\n", yytext);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 90 "lex.l"
{printf("(%s) - AS_KEY_WORD\n", yytext);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 91 "lex.l"
{printf("(%s) - FALSE_KEY_WORD\n", yytext);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 92 "lex.l"
{printf("(%s) - IS_KEY_WORD\n", yytext);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 93 "lex.l"
{printf("(%s) - NIL_KEY_WORD\n", yytext);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 94 "lex.l"
{printf("(%s) - SELF_KEY_WORD\n", yytext);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 95 "lex.l"
{printf("(%s) - SELF_KEY_WORD\n", yytext);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 96 "lex.l"
{printf("(%s) - SUPER_KEY_WORD\n", yytext);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 97 "lex.l"
{printf("(%s) - THROWS_KEY_WORD\n", yytext);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 98 "lex.l"
{printf("(%s) - TRUE_KEY_WORD\n", yytext);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 99 "lex.l"
{printf("(%s) - TRY_KEY_WORD\n", yytext);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 102 "lex.l"
{printf("(%s) - ASSOCIATIVITY_KEY_WORD\n", yytext);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 103 "lex.l"
{printf("(%s) - CONVENIENCE_KEY_WORD\n", yytext);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 104 "lex.l"
{printf("(%s) - DIDSET_KEY_WORD\n", yytext);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "lex.l"
{printf("(%s) - DYNAMIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 106 "lex.l"
{printf("(%s) - FINAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 107 "lex.l"
{printf("(%s) - GET_KEY_WORD\n", yytext);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 108 "lex.l"
{printf("(%s) - INDIRECT_KEY_WORD\n", yytext);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 109 "lex.l"
{printf("(%s) - INFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 110 "lex.l"
{printf("(%s) - LAZY_KEY_WORD\n", yytext);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 111 "lex.l"
{printf("(%s) - LEFT_KEY_WORD\n", yytext);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 112 "lex.l"
{printf("(%s) - MUTATING_KEY_WORD\n", yytext);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 113 "lex.l"
{printf("(%s) - NONE_KEY_WORD\n", yytext);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 114 "lex.l"
{printf("(%s) - NONMUTATING_KEY_WORD\n", yytext);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 115 "lex.l"
{printf("(%s) - OPTIONAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 116 "lex.l"
{printf("(%s) - OVERRIDE_KEY_WORD\n", yytext);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 117 "lex.l"
{printf("(%s) - POSTFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 118 "lex.l"
{printf("(%s) - PRECEDENCE_KEY_WORD\n", yytext);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 119 "lex.l"
{printf("(%s) - PREFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 120 "lex.l"
{printf("(%s) - PROTOCOL_KEY_WORD\n", yytext);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 121 "lex.l"
{printf("(%s) - REQUIRED_KEY_WORD\n", yytext);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 122 "lex.l"
{printf("(%s) - RIGHT_KEY_WORD\n", yytext);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 123 "lex.l"
{printf("(%s) - SET_KEY_WORD\n", yytext);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 124 "lex.l"
{printf("(%s) - SOME_KEY_WORD\n", yytext);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 125 "lex.l"
{printf("(%s) - TYPE_KEY_WORD\n", yytext);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 126 "lex.l"
{printf("(%s) - UNOWNED_KEY_WORD\n", yytext);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 127 "lex.l"
{printf("(%s) - WEAK_KEY_WORD\n", yytext);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 128 "lex.l"
{printf("(%s) - WILLSET_KEY_WORD\n", yytext);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 131 "lex.l"
{printf("(%s) - #AVAILABLE_KEY_WORD\n", yytext);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 132 "lex.l"
{printf("(%s) - #COLORLITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 133 "lex.l"
{printf("(%s) - #COLUMN_KEY_WORD\n", yytext);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 134 "lex.l"
{printf("(%s) - #DSOHANDLE_KEY_WORD\n", yytext);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 135 "lex.l"
{printf("(%s) - #ELSEIF_WORD\n", yytext);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 136 "lex.l"
{printf("(%s) - #ELSE_WORD\n", yytext);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 137 "lex.l"
{printf("(%s) - #ENDIF_KEY_WORD\n", yytext);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 138 "lex.l"
{printf("(%s) - #ERROR_KEY_WORD\n", yytext);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 139 "lex.l"
{printf("(%s) - #FILEID_KEY_WORD\n", yytext);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 140 "lex.l"
{printf("(%s) - #FILELITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 141 "lex.l"
{printf("(%s) - #FILEPATH_KEY_WORD\n", yytext);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 142 "lex.l"
{printf("(%s) - #FILE_KEY_WORD\n", yytext);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 143 "lex.l"
{printf("(%s) - #FUNCTION_KEY_WORD\n", yytext);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 144 "lex.l"
{printf("(%s) - #IF_WORD\n", yytext);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 145 "lex.l"
{printf("(%s) - #IMAGELITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 146 "lex.l"
{printf("(%s) - #KEYPATH_KEY_WORD\n", yytext);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 147 "lex.l"
{printf("(%s) - #LINE_KEY_WORD\n", yytext);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 148 "lex.l"
{printf("(%s) - #SELECTOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 149 "lex.l"
{printf("(%s) - #SOURCELOCATION_KEY_WORD\n", yytext);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 150 "lex.l"
{printf("(%s) - #WARNING_KEY_WORD\n", yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 153 "lex.l"
{ printf("Found OPERATOR_PLUS: %s\n", yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 154 "lex.l"
{ printf("Found OPERATOR_MINUS: %s\n", yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 155 "lex.l"
{ printf("Found OPERATOR_DIVISION: %s\n", yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 156 "lex.l"
{ printf("Found OPERATOR_MULTIPLICATION: %s\n", yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 157 "lex.l"
{ printf("Found OPERATOR_MODULUS: %s\n", yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 160 "lex.l"
{ printf("Found OPERATOR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 161 "lex.l"
{ printf("Found OPERATOR_PLUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 162 "lex.l"
{ printf("Found OPERATOR_MINUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 163 "lex.l"
{ printf("Found OPERATOR_DIVIDE_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 164 "lex.l"
{ printf("Found OPERATOR_MUTIPLY_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 165 "lex.l"
{ printf("Found OPERATOR_MODULUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "lex.l"
{ printf("Found OPERATOR_LEFT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "lex.l"
{ printf("Found OPERATOR_RIGHT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "lex.l"
{ printf("Found OPERATOR_BINARY_AND: %s\n", yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "lex.l"
{ printf("Found OPERATOR_BINARY_OR: %s\n", yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "lex.l"
{ printf("Found OPERATOR_BINARY_XOR: %s\n", yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "lex.l"
{ printf("Found OPERATOR_TILDE: %s\n", yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 176 "lex.l"
{ printf("Found OPERATOR_LESS: %s\n", yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 177 "lex.l"
{ printf("Found OPERATOR_GREATER: %s\n", yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 178 "lex.l"
{ printf("Found OPERATOR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 179 "lex.l"
{ printf("Found OPERATOR_LESS_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 180 "lex.l"
{ printf("Found OPERATOR_GREATER_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 181 "lex.l"
{ printf("Found OPERATOR_NOT_EQUAL: %s\n", yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 184 "lex.l"
{ printf("Found OPERATOR_LOGICAL_AND: %s\n", yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 185 "lex.l"
{ printf("Found OPERATOR_LOGICAL_OR: %s\n", yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 186 "lex.l"
{ printf("Found OPERATOR_LOGICAL_NOT: %s\n", yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "lex.l"
{ printf("Found OPERATOR_NIL_COALESCING: %s\n", yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "lex.l"
{ printf("Found OPERATOR_INCREMENT: %s\n", yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "lex.l"
{ printf("Found OPERATOR_DECREMENT: %s\n", yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 194 "lex.l"
{ printf("Found OPERATOR_POINT: %s\n", yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 195 "lex.l"
{ printf("Found OPERATOR_COMMA: %s\n", yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 196 "lex.l"
{ printf("Found OPERATOR_CLOSED_RANGE: %s\n", yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 197 "lex.l"
{ printf("Found OPERATOR_HALF_OPEN_RANGE: %s\n", yytext); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 198 "lex.l"
{ printf("Found OPERATOR_ONE_SIDED_RANGE: %s\n", yytext); } 
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 200 "lex.l"
{ printf("Found OPERATOR_COLON: %s\n", yytext); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 202 "lex.l"
{ printf("Found LEFT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 203 "lex.l"
{ printf("Found RIGHT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 204 "lex.l"
{ printf("Found LEFT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 205 "lex.l"
{ printf("Found RIGHT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 206 "lex.l"
{ printf("Found LEFT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 207 "lex.l"
{ printf("Found RIGHT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 209 "lex.l"
{ printf("Found TYPE_BOOL: %s\n", yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 210 "lex.l"
{ printf("Found TYPE_STRING: %s\n", yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 211 "lex.l"
{ printf("Found TYPE_CHARACTER: %s\n", yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 212 "lex.l"
{ printf("Found TYPE_INT8: %s\n", yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 213 "lex.l"
{ printf("Found TYPE_INT16: %s\n", yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 214 "lex.l"
{ printf("Found TYPE_INT32: %s\n", yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 215 "lex.l"
{ printf("Found TYPE_INT64: %s\n", yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 216 "lex.l"
{ printf("Found TYPE_INT: %s\n", yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 217 "lex.l"
{ printf("Found TYPE_UINT8: %s\n", yytext); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 218 "lex.l"
{ printf("Found TYPE_UINT16: %s\n", yytext); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 219 "lex.l"
{ printf("Found TYPE_UINT32: %s\n", yytext); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 220 "lex.l"
{ printf("Found TYPE_UINT64: %s\n", yytext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 221 "lex.l"
{ printf("Found TYPE_UINT: %s\n", yytext); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 222 "lex.l"
{ printf("Found TYPE_FLOAT: %s\n", yytext); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 223 "lex.l"
{ printf("Found TYPE_FLOAT80: %s\n", yytext); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 224 "lex.l"
{ printf("Found TYPE_DOUBLE: %s\n", yytext); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 226 "lex.l"
{strcpy(str, ""); multilineNumberBegin = lineNumber; BEGIN(MULTILINE_COMMENT);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 227 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 228 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 229 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 230 "lex.l"
{ printf("Found MULTILINE_COMMENT: %s\n", str); BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(MULTILINE_COMMENT):
#line 231 "lex.l"
{ printf("MULTILINE_COMMENT ERROR in line %d: comment are not closed\n", multilineNumberBegin); BEGIN(INITIAL); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 233 "lex.l"
{ printf("Found ONELINE_COMMENT: %s\n", yytext); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 235 "lex.l"
{ strcpy(str, ""); multilineNumberBegin = lineNumber; BEGIN(MULTILINE_STRING); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 236 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 237 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 238 "lex.l"
{ strcat(str, "\\"); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 239 "lex.l"
{ strcat(str, "\""); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 240 "lex.l"
{ strcat(str, "\'"); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 241 "lex.l"
{ strcat(str, "\"\""); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 242 "lex.l"
{ strcat(str, "\"\"\""); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 243 "lex.l"
{ strcat(str, "\"\"\""); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 244 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 245 "lex.l"
{ printf("Found MULTILINE_STRING: %s\n", str); BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(MULTILINE_STRING):
#line 246 "lex.l"
{ printf("MULTILINE_COMMENT ERROR in line %d: multiline string are not closed\n", multilineNumberBegin); BEGIN(INITIAL); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 248 "lex.l"
{ stdstr = ""; BEGIN(STRING); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 249 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 250 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 251 "lex.l"
{ stdstr += "\n"; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 252 "lex.l"
{ stdstr += "\b"; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 253 "lex.l"
{ stdstr += "\0"; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 254 "lex.l"
{ stdstr += "\\"; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 255 "lex.l"
{ stdstr += "\f"; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 256 "lex.l"
{ stdstr += "\r"; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 257 "lex.l"
{ stdstr += "\t"; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 258 "lex.l"
{ stdstr += "\v"; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 259 "lex.l"
{ stdstr += "\'"; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 260 "lex.l"
{ stdstr += "\""; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 261 "lex.l"
{
    char *a;
    int x = strtol(yytext + 3, &a, 16);
    if (x <= 127) {
        char buf[2];
        buf[0] = x;
        buf[1] = 0;
		stdstr += buf;
    } else {
        printf("Eror in %d: unicode not supported\n", lineNumber);
    }
 } 
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 273 "lex.l"
{ std::cout << "STRING: " << stdstr << std::endl; BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 274 "lex.l"
{ printf("Error in %d:  no closing quotation mark\n", lineNumber); BEGIN(INITIAL); }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 276 "lex.l"
{
	removeChar(yytext, str, '_');
	printf("DECIMAL_NUMBER: %d\n", atoi(str));
}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 281 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("BIN_NUMBER: %d\n", strtol(str + 2, NULL, 2));
    }
    else
    {
       printf("Error: incorrect format for DECIMAL_NUMBER\n");
    }
}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 294 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("OCTAL_NUMBER: %d\n", strtol(str + 2, NULL, 8));
    }
    else
    {
        printf("Error: incorrect format for OCTAL_NUMBER\n");
    }
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 307 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("HEXADEMICAL_NUMBER: %d\n", strtol(str + 2, NULL, 16));
    }
    else
    {
        printf("Error: incorrect format for HEXADEMICAL_NUMBER\n");
    }
}
	YY_BREAK
case 196:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 320 "lex.l"
{ 
	removeChar(yytext, str, '_');
    printf("DECIMAL_FLOATINGPOINT_NUMBER: %f\n", atof(str));
}
	YY_BREAK
case 197:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 325 "lex.l"
{ 
	removeChar(yytext, str, '_');
    printf("HEXADECIMAL_FLOATINGPOINT_NUMBER: %f\n", atof(str));
}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 330 "lex.l"
{ printf("Found IDENTIFIER: %s\n", yytext); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 331 "lex.l"
ECHO;
	YY_BREAK
#line 2534 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 701 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 701 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 700);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 331 "lex.l"


void convertCharacterCodeToString(char charCode[], int pos, char *str)
{
    str[0] = strtol(charCode + pos, NULL, 16);
    str[1] = '\0';
}

void removeChar(const char * str, char * dest, char deletedChar) 
{
    int j = 0;

    for (int i = 0; i < strlen(yytext); i++) {
        if (str[i] != deletedChar) {
            dest[j++] = str[i];
        }
    }

    dest[j] = '\0';
}

int main( int argc, char** argv)
{
    if (argc == 2)
    {
        FILE *file = fopen(argv[1], "r");
        if (file == NULL) 
        {
            printf("File opening error");
            return 1;
        }
        yyin = file;
        yylex();
        fclose(file);
        return 0;
    }
    else
    {
        printf("missed commandline argument");
        return 1;
    }
}
