#line 1 "lex.yy.cpp"

#line 3 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 209
#define YY_END_OF_BUFFER 210
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[715] =
    {   0,
        0,    0,    0,    0,  163,  163,    0,    0,    0,    0,
        0,    0,  210,  209,    2,    1,  129,  179,  209,  108,
      117,  140,  141,  107,  104,  134,  105,  133,  106,  196,
      196,  138,  121,  109,  122,  137,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  142,  143,  119,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      144,  118,  145,  120,  169,  170,  169,  169,  163,  164,
      165,  180,  181,  195,  185,  209,  193,  192,    2,  126,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  114,  127,  113,  131,    0,    0,    0,  110,  132,
      111,  139,    0,    0,  162,  167,  112,  206,  196,    0,
        0,    0,    0,    0,  115,  124,  123,  125,  116,  130,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,   47,  208,  208,  208,  208,  208,
      208,   33,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,   38,  208,   39,   49,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  128,  177,  172,  173,  171,  163,  165,  165,  166,

      180,  191,  190,  184,  183,  186,  182,  187,  188,    0,
      189,    0,  192,  168,    0,    0,    0,    0,    0,    0,
        0,    0,   97,    0,    0,    0,    0,    0,    0,  135,
      136,  167,    0,    0,    0,    0,  197,  199,  200,  202,
      203,  203,  205,  203,   46,  208,  208,  208,  208,  153,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,   36,  208,   62,  208,  208,  208,  208,  208,
      208,  208,  208,  208,   13,  208,   50,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,   78,  208,  208,  208,  208,  208,  208,  208,  208,
       56,  208,  208,   26,  208,  208,  208,  208,  178,  174,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  197,  199,  198,
      198,  200,  202,  201,  201,  203,  203,  205,  204,  204,
      203,  146,  208,  208,  208,  208,  208,  208,  149,  208,
       52,  208,   80,  158,  208,  208,   28,  208,  208,  208,
      208,  208,  208,  208,  208,  208,   34,    6,  208,  208,
      208,  208,  208,   25,  208,  208,  208,  208,   10,  208,
      208,   65,   66,  208,   68,  208,   14,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,   51,   79,  208,  208,  208,  208,  208,  208,   55,
      208,  208,   82,  208,  208,  208,  175,    0,    0,    0,
        0,    0,    0,   89,    0,    0,   95,    0,    0,    0,
      100,    0,    0,    0,  207,    0,  203,  208,  208,  159,
      150,  151,  152,  208,  208,  208,  208,  208,  154,  208,
       27,   29,    4,  208,  208,  208,   32,  208,  208,  208,
      208,  208,   48,  208,   61,   37,  208,  208,   64,   11,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,   77,  208,  208,  208,

       53,  208,   42,  208,  208,   44,   45,  208,  176,    0,
      194,    0,    0,    0,    0,    0,   90,   91,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  203,
      208,  161,  208,  208,  147,  155,  156,  157,  208,  208,
      208,  208,    5,   59,  208,  208,  208,  208,    9,  208,
      208,  208,  208,  208,  208,  208,  208,  208,   74,  208,
      208,   19,   40,  208,  208,   41,   21,   22,  208,   43,
       54,  208,  208,  208,    0,    0,    0,   86,    0,   88,
       92,    0,    0,    0,    0,    0,    0,    0,    0,  208,
      160,  208,  208,  208,  208,   31,   60,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,   72,  208,   16,
      208,  208,  208,  208,  208,   81,   83,    0,    0,    0,
        0,    0,    0,    0,    0,   99,    0,    0,  103,  208,
       75,  208,   30,  208,  208,  208,  208,   63,   12,   67,
      208,   15,   70,   71,  208,   18,   76,   20,  208,  208,
        0,    0,    0,    0,    0,   94,   96,    0,  101,    0,
      148,  208,  208,  208,    7,  208,  208,  208,  208,   23,
       24,   84,    0,   87,    0,    0,    0,  208,  208,  208,
      208,  208,  208,   73,    0,    0,    0,    0,  208,  208,
       58,   35,    8,   69,  208,    0,   93,    0,    0,  208,

      208,  208,   85,   98,    0,  208,   57,  208,    0,    3,
      208,  102,   17,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   24,   26,   27,   28,    1,   29,
       30,   31,   32,    1,   33,   34,   35,   36,   37,   38,
       39,   39,   40,   39,   39,   41,   39,   39,   39,   42,
       39,   39,   43,   44,   45,   39,   39,   46,   39,   39,
       47,   48,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   39,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[81] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    4,    5,    1,    6,    7,    1,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    9,
        1,    1,   10,   10,   10,   10,   11,   10,   12,   12,
       12,   12,   12,   12,   12,   12,    1,    3,    1,    1,
       13,   10,   10,   10,   10,   11,   10,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,    1,    1,   14,    1
    } ;

static const flex_int16_t yy_base[747] =
    {   0,
        0,    0,   78,   82,   80,   84,   86,   88,    0,    0,
       92,   93, 1267, 1268, 1264, 1268, 1235, 1258,   48, 1233,
     1253, 1268, 1268, 1231,   97, 1268,  121,  122,   88,  171,
      104, 1268,   83, 1230,   89, 1227, 1194, 1192, 1197, 1190,
        0, 1192, 1189, 1184,   59, 1176, 1210, 1268, 1268, 1268,
      243, 1180, 1180,  101,  100,   97,  112,   51,  142,   72,
     1176,  102,   59,  111,   98,  145,  144, 1182, 1193,  125,
     1268, 1166, 1268, 1268, 1268, 1268, 1237,  194,    0, 1268,
      189,    0, 1268, 1268,  219, 1236, 1268, 1235, 1238, 1268,
     1233, 1166, 1172, 1167,  164,  149,  123, 1179, 1174,   67,

     1181, 1268, 1268, 1268, 1268,  228,  268,  167, 1268, 1268,
     1268, 1268,  204,  236, 1268,    0, 1268, 1268,    0,  154,
     1215,  211,  287,  326, 1268, 1268, 1268, 1268, 1268, 1268,
        0, 1156, 1165, 1177, 1157, 1162, 1156, 1160, 1162, 1155,
     1156, 1157,    0,  306, 1151, 1163,  165, 1166, 1153,  180,
     1161,    0, 1151, 1145, 1142, 1142, 1149,  125, 1142, 1145,
     1138, 1155,    0, 1140,  329,    0, 1129,  186, 1134, 1141,
     1138,  188, 1145, 1131,  221, 1146,  208, 1140,  226, 1134,
      232,  249, 1136, 1127,  186, 1128, 1128, 1124, 1139,  237,
     1128, 1268, 1183,  253, 1268, 1268,    0, 1170,  300, 1268,

        0, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1110,
     1268, 1180, 1179, 1268, 1132, 1121, 1117, 1112, 1125, 1111,
     1116, 1113, 1268, 1124, 1100, 1110, 1111, 1101, 1103, 1268,
     1268,    0,  346,  382,    0, 1153,    0,  284,    0,  391,
        0,  424,  465,  525,    0, 1107, 1100, 1114, 1114,  314,
     1095, 1107, 1103, 1106, 1091,  384, 1095, 1107, 1102, 1103,
     1087,  247,  285, 1091, 1111, 1101, 1096, 1088, 1094,  254,
     1093, 1096,    0, 1093,    0, 1078, 1080, 1084, 1083, 1072,
     1070, 1084, 1064, 1068,    0, 1085,    0,  332,  290, 1076,
     1067, 1064,  336, 1061, 1062, 1069, 1074, 1058,  285, 1069,

     1070,    0, 1070, 1055, 1053, 1054, 1066, 1051, 1055, 1063,
        0, 1062, 1044,    0, 1055, 1047, 1052, 1051, 1268, 1106,
     1105,    0, 1050,  352, 1050, 1052, 1047, 1041, 1049, 1050,
     1045, 1060, 1045, 1044, 1031, 1034,  388,    0,  401,  355,
      405,    0,  415,  448,  545,    0,  389, 1080,    0,    0,
        0,    0, 1044, 1033, 1024, 1068, 1071, 1068,    0, 1025,
        0, 1025,    0,  563, 1034, 1026,    0, 1027, 1016, 1024,
     1027, 1011, 1013, 1020, 1023, 1015,    0,    0, 1013, 1006,
     1019, 1008, 1011,    0, 1017, 1003, 1002,  995,    0,  998,
      999,    0,    0,  996,    0,  994,    0, 1012,  998,  994,

     1004, 1004,  999, 1006,  992,  996, 1003,  994,  985,  984,
      981,    0,    0,  990,  995,  994,  979,  992,  972,    0,
      992,  979,    0,  986,  985,  997, 1268, 1033,  959,  975,
      968,  972,  982,  973,  975,  963,  386,  960,  973,  976,
     1268,  973,  972,  965, 1268,  449,  578,  970,  967,  996,
        0,    0,    0,  967,  962,  994,  997,  994,    0,  956,
        0,    0,    0,  951,  950,  951,    0,  942,  941,  950,
      940,  949,    0,  939,    0,    0,  936,  949,    0,    0,
      940,  943,  932,  931,  936,  939,  938,  942,  922,  925,
      940,  939,  922,  923,  925,  925,    0,  934,  917,  918,

        0,  926,  915,  921,  926,    0,    0,  925, 1268,  900,
     1268,  926,  934,  908,  907,  911, 1268, 1268,  929,  904,
      909,  898,  916,  886,  885,  897,  885,  587,  620,  480,
      878,    0,  926,  877,    0,    0,    0,    0,  887,  863,
      868,  852,    0,    0,  862,  850,  836,  841,    0,  844,
      801,  786,  794,  780,  792,  788,  767,  770,    0,  767,
      756,    0,    0,  764,  745,    0,    0,    0,  757,    0,
        0,  756,  760,  744,  721,  734,  726, 1268,  705, 1268,
     1268,  688,  682,  684,  688,  688,  678,  629,  611,  612,
        0,  605,  596,  609,  608,    0,    0,  598,  597,  589,

      590,  597,  600,  587,  588,  593,  598,    0,  589,    0,
      590,  596,  581,  583,  596,    0,    0,  558,  574,  565,
      572,  577,  573,  567,  560, 1268,  560,  562, 1268,  558,
        0,  362,    0,  561,  560,  551,  569,    0,    0,    0,
      560,    0,    0,    0,  565,    0,    0,    0,  548,  548,
      537,  559,  539,  537,  523, 1268, 1268,  534, 1268,  533,
        0,  531,  512,  521,    0,  516,  503,  508,  515,    0,
        0, 1268,  489, 1268,  504,  487,  502,  483,  483,  459,
      455,  441,  437,  435,  422,  402,  401,  371,  357,  359,
        0,    0,    0,    0,  351,  334, 1268,  314,  295,  272,

      246,  230, 1268, 1268,  158,  158,    0,   84,   69,    0,
       24, 1268,    0, 1268,  671,  685,  699,  713,  727,  737,
      743,  756,  770,  784,  798,  811,  824,  834,  841,  854,
      868,  882,  889,  895,  901,  907,  913,  919,  925,  930,
      500,  936,  946,  952,  959,  966
    } ;

static const flex_int16_t yy_def[747] =
    {   0,
      714,    1,  715,  715,  716,  716,  717,  717,  718,  718,
      719,  719,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  720,  714,  720,  714,  714,  714,
       30,  714,  714,  714,  714,  714,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  714,  714,  714,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      714,  714,  714,  714,  714,  714,  714,  714,  722,  714,
      723,  724,  714,  714,  714,  725,  714,  725,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,

      714,  714,  714,  714,  714,  714,  720,  107,  714,  714,
      714,  714,  714,  726,  714,  727,  714,  714,   31,  728,
      729,  730,  731,  732,  714,  714,  714,  714,  714,  714,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,   51,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  714,  714,  714,  714,  714,  722,  723,  723,  714,

      724,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  725,  725,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  727,  714,  714,  733,  729,  734,  735,  736,  737,
      738,  738,  714,  738,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  144,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  714,  714,
      714,  739,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  733,  734,  714,  735,
      735,  736,  714,  737,  737,  738,  242,  740,  741,  243,
      244,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  714,  714,  742,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  743,  738,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  721,  721,  721,  714,  744,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  447,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  745,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  746,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  714,  714,  714,  714,  714,  714,  721,  721,  721,
      721,  721,  721,  721,  714,  714,  714,  714,  721,  721,
      721,  721,  721,  721,  721,  714,  714,  714,  714,  721,

      721,  721,  714,  714,  714,  721,  721,  721,  714,  721,
      721,  714,  721,    0,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714
    } ;

static const flex_int16_t yy_nxt[1349] =
    {   0,
       14,   15,   16,   14,   17,   18,   19,   20,   21,   14,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       31,   31,   31,   31,   31,   31,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   41,   43,
       41,   44,   45,   46,   47,   41,   48,   14,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   41,   59,
       41,   60,   61,   62,   63,   64,   41,   65,   66,   67,
       68,   69,   70,   41,   41,   41,   71,   72,   73,   74,
       76,   14,   80,   77,   76,   14,   80,   77,   83,  713,
       83,   84,   81,   84,   87,   87,   81,   88,   88,   92,

      115,   93,   94,   95,   96,  116,  161,   97,   98,   99,
      105,  125,  126,  106,  139,  107,  100,  117,  128,  129,
      101,  162,  227,  167,  172,   78,  109,  168,  140,   78,
      173,  228,  712,   85,  714,   85,  110,  106,  113,  107,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  714,
      111,  112,  147,  177,  711,  150,  714,  178,  154,  151,
      155,  170,  148,  157,  152,  149,  171,  233,  714,  233,
      156,  158,  114,  118,  153,  174,  159,  714,  175,  223,
      189,  176,  160,  190,  191,  224,  271,  106,  272,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  163,  194,

      179,  199,  184,  195,  164,  165,  200,  120,  221,  180,
      166,  185,  714,  710,  181,  182,  121,  183,  186,  222,
      230,  119,  709,  122,  202,  218,  120,  219,  203,  238,
      238,  220,  231,  259,  260,  123,  263,  204,  118,  264,
      714,  196,  284,  289,  124,  118,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  285,  310,  290,  320,  106,
      311,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      118,  205,  120,  297,  298,  206,  293,  299,  114,  144,
      294,  714,  207,  304,  106,  295,  208,  301,  209,  210,
      211,  120,  316,  143,  708,  302,  317,  714,  144,  305,

      321,  306,  339,  339,  120,  240,  240,  240,  240,  240,
      240,  240,  199,  121,  307,  380,  370,  200,  371,  233,
      707,  233,  381,  120,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  356,  341,  357,  372,  706,  358,  359,
      373,  121,  242,  409,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  397,  705,  410,  256,  398,  243,  243,
      243,  243,  243,  243,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  714,  714,  704,  244,  243,  243,  243,
      243,  243,  243,  278,  118,  279,  118,  395,  280,  402,
      445,  445,  403,  281,  396,  703,  234,  714,  282,  714,

      234,  234,  234,  234,  234,  234,  234,  234,  234,  343,
      343,  343,  343,  343,  343,  343,  431,  662,  702,  339,
      339,  663,  432,  339,  339,  519,  520,  521,  701,  446,
      447,  700,  234,  343,  343,  343,  343,  343,  343,  343,
      699,  345,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  339,  698,  446,  447,  341,  347,  347,  347,  347,
      347,  347,  528,  697,  528,  343,  714,  714,  714,  714,
      714,  714,  714,  696,  347,  347,  347,  347,  347,  347,
      347,  235,  445,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  695,  714,  694,  714,  693,  348,  348,  348,

      348,  348,  348,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  692,  691,  350,  348,  348,  348,  348,
      348,  348,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  235,  690,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  689,  688,  687,  686,  685,  351,  351,  351,
      351,  351,  351,  343,  343,  343,  343,  343,  343,  343,
      684,  683,  682,  681,  680,  351,  351,  351,  351,  351,
      351,  351,  456,  679,  457,  678,  677,  458,  459,  676,
      675,  528,  674,  528,  673,  345,  530,  530,  530,  530,

      530,  530,  530,  530,  530,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  672,  511,  671,  670,  669,  668,
      667,  666,  445,  665,  664,  661,  660,  659,  530,  658,
      657,  656,  655,  654,  653,  652,  511,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  650,  649,  648,
      647,  646,  645,  644,  643,  642,  641,  640,  639,  638,
      637,  636,  635,  634,  633,  632,  631,  630,  629,  628,
      529,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,  108,  627,  108,  108,  108,  626,  625,  624,  108,
      131,  623,  131,  131,  131,  131,  197,  622,  197,  621,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  201,  620,  619,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  212,  511,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  114,  617,  616,  615,  614,  613,  114,  612,
      611,  114,  610,  114,  232,  609,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  234,  234,
      608,  234,  607,  606,  605,  604,  234,  236,  236,  603,
      236,  236,  602,  236,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  337,  601,  337,  337,

      600,  337,  338,  599,  338,  338,  338,  338,  340,  598,
      340,  340,  340,  340,  342,  597,  342,  342,  342,  342,
      344,  596,  344,  344,  344,  344,  346,  595,  346,  346,
      346,  346,  429,  594,  429,  429,  348,  348,  593,  348,
      348,  592,  348,  510,  591,  510,  510,  590,  589,  510,
      529,  529,  588,  529,  587,  586,  585,  584,  529,  575,
      583,  575,  575,  582,  581,  575,  618,  580,  618,  618,
      579,  578,  618,  651,  577,  651,  651,  576,  511,  651,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  565,
      564,  563,  562,  561,  560,  559,  558,  557,  556,  555,

      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  527,  526,  525,  524,  523,  522,
      518,  517,  516,  515,  514,  513,  512,  511,  509,  508,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  489,  488,
      487,  486,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  455,  454,
      453,  452,  451,  450,  449,  448,  235,  444,  443,  442,

      441,  440,  439,  438,  437,  436,  435,  434,  433,  430,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  408,  407,
      406,  405,  404,  401,  400,  399,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  379,
      378,  377,  376,  375,  374,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  355,  354,  353,  352,  235,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  213,  213,  322,  714,  319,  318,
      315,  314,  313,  312,  309,  308,  303,  300,  296,  292,

      291,  288,  287,  286,  283,  277,  276,  275,  274,  273,
      270,  269,  268,  267,  266,  265,  262,  261,  258,  257,
      255,  254,  253,  252,  251,  250,  249,  248,  247,  246,
      245,  235,  229,  226,  225,  217,  216,  215,  214,   89,
      213,  213,  193,  192,  188,  187,  169,  146,  145,  142,
      141,  138,  137,  136,  135,  134,  133,  132,  130,  127,
      104,  103,  102,   91,   90,   89,  714,   13,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,

      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714
    } ;

static const flex_int16_t yy_chk[1349] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    5,    3,    4,    4,    6,    4,    7,  711,
        8,    7,    5,    8,   11,   12,    6,   11,   12,   19,

       29,   19,   19,   19,   19,   29,   58,   19,   19,   19,
       25,   33,   33,   25,   45,   25,   19,   29,   35,   35,
       19,   58,  100,   60,   63,    3,   25,   60,   45,    4,
       63,  100,  709,    7,   27,    8,   27,   27,   28,   27,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   31,
       27,   27,   54,   65,  708,   55,   31,   65,   56,   55,
       56,   62,   54,   57,   55,   54,   62,  120,   31,  120,
       56,   57,   28,   30,   55,   64,   57,   31,   64,   97,
       70,   64,   57,   70,   70,   97,  158,   30,  158,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   59,   78,

       66,   81,   67,   78,   59,   59,   81,   30,   96,   66,
       59,   67,  108,  706,   66,   66,   30,   66,   67,   96,
      113,   30,  705,   30,   85,   95,   30,   95,   85,  122,
      122,   95,  113,  147,  147,   30,  150,   85,  114,  150,
      108,   78,  168,  172,   30,   51,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  168,  185,  172,  194,   51,
      185,   51,   51,   51,   51,   51,   51,   51,   51,   51,
      107,   85,  114,  177,  177,   85,  175,  177,  106,   51,
      175,  107,   85,  181,  107,  175,   85,  179,   85,   85,
       85,  114,  190,   51,  702,  179,  190,  107,   51,  181,

      194,  182,  238,  238,  107,  123,  123,  123,  123,  123,
      123,  123,  199,  107,  182,  270,  262,  199,  262,  144,
      701,  144,  270,  107,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  250,  238,  250,  263,  700,  250,  250,
      263,  107,  124,  299,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  289,  699,  299,  144,  289,  124,  124,
      124,  124,  124,  124,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  340,  340,  698,  124,  124,  124,  124,
      124,  124,  124,  165,  234,  165,  256,  288,  165,  293,
      337,  347,  293,  165,  288,  696,  233,  256,  165,  256,

      234,  234,  234,  234,  234,  234,  234,  234,  234,  240,
      240,  240,  240,  240,  240,  240,  324,  632,  695,  339,
      339,  632,  324,  341,  341,  437,  437,  437,  690,  337,
      347,  689,  234,  343,  343,  343,  343,  343,  343,  343,
      688,  240,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  339,  687,  337,  347,  341,  242,  242,  242,  242,
      242,  242,  446,  686,  446,  343,  344,  344,  344,  344,
      344,  344,  344,  685,  242,  242,  242,  242,  242,  242,
      242,  243,  530,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  684,  530,  683,  530,  682,  243,  243,  243,

      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  741,  741,  681,  680,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  244,  679,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  678,  677,  676,  675,  673,  244,  244,  244,
      244,  244,  244,  345,  345,  345,  345,  345,  345,  345,
      669,  668,  667,  666,  664,  244,  244,  244,  244,  244,
      244,  244,  364,  663,  364,  662,  660,  364,  364,  658,
      655,  447,  654,  447,  653,  345,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  652,  651,  650,  649,  645,  641,
      637,  636,  529,  635,  634,  630,  628,  627,  447,  625,
      624,  623,  622,  621,  620,  619,  618,  528,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  615,  614,  613,
      612,  611,  609,  607,  606,  605,  604,  603,  602,  601,
      600,  599,  598,  595,  594,  593,  592,  590,  589,  588,
      529,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  720,  587,  720,  720,  720,  586,  585,  584,  720,
      721,  583,  721,  721,  721,  721,  722,  582,  722,  579,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  724,  577,  576,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  725,  575,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  726,  574,  573,  572,  569,  565,  726,  564,
      561,  726,  560,  726,  727,  558,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  728,  728,
      557,  728,  556,  555,  554,  553,  728,  729,  729,  552,
      729,  729,  551,  729,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  733,  550,  733,  733,

      548,  733,  734,  547,  734,  734,  734,  734,  735,  546,
      735,  735,  735,  735,  736,  545,  736,  736,  736,  736,
      737,  542,  737,  737,  737,  737,  738,  541,  738,  738,
      738,  738,  739,  540,  739,  739,  740,  740,  539,  740,
      740,  534,  740,  742,  533,  742,  742,  531,  527,  742,
      743,  743,  526,  743,  525,  524,  523,  522,  743,  744,
      521,  744,  744,  520,  519,  744,  745,  516,  745,  745,
      515,  514,  745,  746,  513,  746,  746,  512,  510,  746,
      508,  505,  504,  503,  502,  500,  499,  498,  496,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,

      484,  483,  482,  481,  478,  477,  474,  472,  471,  470,
      469,  468,  466,  465,  464,  460,  458,  457,  456,  455,
      454,  450,  449,  448,  444,  443,  442,  440,  439,  438,
      436,  435,  434,  433,  432,  431,  430,  429,  428,  426,
      425,  424,  422,  421,  419,  418,  417,  416,  415,  414,
      411,  410,  409,  408,  407,  406,  405,  404,  403,  402,
      401,  400,  399,  398,  396,  394,  391,  390,  388,  387,
      386,  385,  383,  382,  381,  380,  379,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  366,  365,  362,  360,
      358,  357,  356,  355,  354,  353,  348,  336,  335,  334,

      333,  332,  331,  330,  329,  328,  327,  326,  325,  323,
      321,  320,  318,  317,  316,  315,  313,  312,  310,  309,
      308,  307,  306,  305,  304,  303,  301,  300,  298,  297,
      296,  295,  294,  292,  291,  290,  286,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  274,  272,  271,  269,
      268,  267,  266,  265,  264,  261,  260,  259,  258,  257,
      255,  254,  253,  252,  251,  249,  248,  247,  246,  236,
      229,  228,  227,  226,  225,  224,  222,  221,  220,  219,
      218,  217,  216,  215,  213,  212,  210,  198,  193,  191,
      189,  188,  187,  186,  184,  183,  180,  178,  176,  174,

      173,  171,  170,  169,  167,  164,  162,  161,  160,  159,
      157,  156,  155,  154,  153,  151,  149,  148,  146,  145,
      142,  141,  140,  139,  138,  137,  136,  135,  134,  133,
      132,  121,  101,   99,   98,   94,   93,   92,   91,   89,
       88,   86,   77,   72,   69,   68,   61,   53,   52,   47,
       46,   44,   43,   42,   40,   39,   38,   37,   36,   34,
       24,   21,   20,   18,   17,   15,   13,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,

      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex.l"





#line 17 "lex.l"
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <iostream>
    #include <string>
    #include <ctype.h>
    using namespace std;
#line 999 "lex.yy.cpp"
#line 1000 "lex.yy.cpp"

#define INITIAL 0
#define MULTILINE_STRING 1
#define MULTILINE_COMMENT 2
#define STRING 3
#define CHAR 4
#define ERROR_ONELINE_STRING 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			yy_size_t yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 26 "lex.l"



#line 30 "lex.l"
    void convertCharacterCodeToString(char charCode[], int pos, char *str);
    void removeChar(const char * str, char * dest, char deletedChar);
	
	
	char str[1024];
	string stdstr = "";
	int lineNumber = 1;  
    int multilineNumberBegin = 0;
	


#line 1238 "lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 715 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 714 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 41 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 42 "lex.l"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 45 "lex.l"
{printf("(%s) - ASSOCIATEDTYPE_KEY_WORD\n", yytext);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 46 "lex.l"
{printf("(%s) - CLASS_KEY_WORD\n", yytext);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "lex.l"
{printf("(%s) - DEINIT_KEY_WORD\n", yytext);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 48 "lex.l"
{printf("(%s) - ENUM_KEY_WORD\n", yytext);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 49 "lex.l"
{printf("(%s) - EXTENSION_KEY_WORD\n", yytext);}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 50 "lex.l"
{printf("(%s) - FILEPRIVATE_KEY_WORD\n", yytext);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 51 "lex.l"
{printf("(%s) - IMPORT_KEY_WORD\n", yytext);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 52 "lex.l"
{printf("(%s) - INIT_KEY_WORD\n", yytext);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 53 "lex.l"
{printf("(%s) - INOUT_KEY_WORD\n", yytext);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 54 "lex.l"
{printf("(%s) - INTERNAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 55 "lex.l"
{printf("(%s) - LET_KEY_WORD\n", yytext);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 56 "lex.l"
{printf("(%s) - OPEN_KEY_WORD\n", yytext);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 57 "lex.l"
{printf("(%s) - OPERATOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 58 "lex.l"
{printf("(%s) - PRIVATE_KEY_WORD\n", yytext);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 59 "lex.l"
{printf("(%s) - PRECEDENCEGROUP_KEY_WORD\n", yytext);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 60 "lex.l"
{printf("(%s) - PROTOCOL_KEY_WORD\n", yytext);}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 61 "lex.l"
{printf("(%s) - PUBLIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 62 "lex.l"
{printf("(%s) - RETHROWS_KEY_WORD\n", yytext);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 63 "lex.l"
{printf("(%s) - STATIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 64 "lex.l"
{printf("(%s) - STRUCT_KEY_WORD\n", yytext);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 65 "lex.l"
{printf("(%s) - SUBSCRIPT_KEY_WORD\n", yytext);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 66 "lex.l"
{printf("(%s) - TYPEALIAS_KEY_WORD\n", yytext);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 67 "lex.l"
{printf("(%s) - FUNC_KEY_WORD\n", yytext);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 68 "lex.l"
{printf("(%s) - VAR_KEY_WORD\n", yytext);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 71 "lex.l"
{printf("(%s) - BREAK_KEY_WORD\n", yytext);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 72 "lex.l"
{printf("(%s) - CASE_KEY_WORD\n", yytext);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 73 "lex.l"
{printf("(%s) - CATCH_KEY_WORD\n", yytext);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 74 "lex.l"
{printf("(%s) - CONTINUE_KEY_WORD\n", yytext);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 75 "lex.l"
{printf("(%s) - DEFAULT_KEY_WORD\n", yytext);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 76 "lex.l"
{printf("(%s) - DEFER_KEY_WORD\n", yytext);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 77 "lex.l"
{printf("(%s) - DO_KEY_WORD\n", yytext);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 78 "lex.l"
{printf("(%s) - ELSE_KEY_WORD\n", yytext);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 79 "lex.l"
{printf("(%s) - FALLTHROUGH_KEY_WORD\n", yytext);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 80 "lex.l"
{printf("(%s) - FOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 81 "lex.l"
{printf("(%s) - GUARD_KEY_WORD\n", yytext);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 82 "lex.l"
{printf("(%s) - IF_KEY_WORD\n", yytext);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 83 "lex.l"
{printf("(%s) - IN_KEY_WORD\n", yytext);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 84 "lex.l"
{printf("(%s) - REPEAT_KEY_WORD\n", yytext);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 85 "lex.l"
{printf("(%s) - RETURN_KEY_WORD\n", yytext);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 86 "lex.l"
{printf("(%s) - THROW_KEY_WORD\n", yytext);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 87 "lex.l"
{printf("(%s) - SWITCH_KEY_WORD\n", yytext);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 88 "lex.l"
{printf("(%s) - WHERE_KEY_WORD\n", yytext);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 89 "lex.l"
{printf("(%s) - WHILE_KEY_WORD\n", yytext);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 91 "lex.l"
{printf("(%s) - ANY_KEY_WORD\n", yytext);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 92 "lex.l"
{printf("(%s) - AS_KEY_WORD\n", yytext);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 93 "lex.l"
{printf("(%s) - FALSE_KEY_WORD\n", yytext);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "lex.l"
{printf("(%s) - IS_KEY_WORD\n", yytext);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "lex.l"
{printf("(%s) - NIL_KEY_WORD\n", yytext);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "lex.l"
{printf("(%s) - SELF_KEY_WORD\n", yytext);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 97 "lex.l"
{printf("(%s) - SELF_KEY_WORD\n", yytext);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 98 "lex.l"
{printf("(%s) - SUPER_KEY_WORD\n", yytext);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 99 "lex.l"
{printf("(%s) - THROWS_KEY_WORD\n", yytext);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 100 "lex.l"
{printf("(%s) - TRUE_KEY_WORD\n", yytext);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 101 "lex.l"
{printf("(%s) - TRY_KEY_WORD\n", yytext);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 104 "lex.l"
{printf("(%s) - ASSOCIATIVITY_KEY_WORD\n", yytext);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 105 "lex.l"
{printf("(%s) - CONVENIENCE_KEY_WORD\n", yytext);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 106 "lex.l"
{printf("(%s) - DIDSET_KEY_WORD\n", yytext);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 107 "lex.l"
{printf("(%s) - DYNAMIC_KEY_WORD\n", yytext);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 108 "lex.l"
{printf("(%s) - FINAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 109 "lex.l"
{printf("(%s) - GET_KEY_WORD\n", yytext);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 110 "lex.l"
{printf("(%s) - INDIRECT_KEY_WORD\n", yytext);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 111 "lex.l"
{printf("(%s) - INFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 112 "lex.l"
{printf("(%s) - LAZY_KEY_WORD\n", yytext);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 113 "lex.l"
{printf("(%s) - LEFT_KEY_WORD\n", yytext);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 114 "lex.l"
{printf("(%s) - MUTATING_KEY_WORD\n", yytext);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 115 "lex.l"
{printf("(%s) - NONE_KEY_WORD\n", yytext);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 116 "lex.l"
{printf("(%s) - NONMUTATING_KEY_WORD\n", yytext);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 117 "lex.l"
{printf("(%s) - OPTIONAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 118 "lex.l"
{printf("(%s) - OVERRIDE_KEY_WORD\n", yytext);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 119 "lex.l"
{printf("(%s) - POSTFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 120 "lex.l"
{printf("(%s) - PRECEDENCE_KEY_WORD\n", yytext);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 121 "lex.l"
{printf("(%s) - PREFIX_KEY_WORD\n", yytext);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 122 "lex.l"
{printf("(%s) - PROTOCOL_KEY_WORD\n", yytext);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 123 "lex.l"
{printf("(%s) - REQUIRED_KEY_WORD\n", yytext);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 124 "lex.l"
{printf("(%s) - RIGHT_KEY_WORD\n", yytext);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 125 "lex.l"
{printf("(%s) - SET_KEY_WORD\n", yytext);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 126 "lex.l"
{printf("(%s) - SOME_KEY_WORD\n", yytext);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 127 "lex.l"
{printf("(%s) - TYPE_KEY_WORD\n", yytext);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 128 "lex.l"
{printf("(%s) - UNOWNED_KEY_WORD\n", yytext);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 129 "lex.l"
{printf("(%s) - WEAK_KEY_WORD\n", yytext);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 130 "lex.l"
{printf("(%s) - WILLSET_KEY_WORD\n", yytext);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 133 "lex.l"
{printf("(%s) - #AVAILABLE_KEY_WORD\n", yytext);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 134 "lex.l"
{printf("(%s) - #COLORLITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 135 "lex.l"
{printf("(%s) - #COLUMN_KEY_WORD\n", yytext);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 136 "lex.l"
{printf("(%s) - #DSOHANDLE_KEY_WORD\n", yytext);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 137 "lex.l"
{printf("(%s) - #ELSEIF_WORD\n", yytext);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 138 "lex.l"
{printf("(%s) - #ELSE_WORD\n", yytext);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 139 "lex.l"
{printf("(%s) - #ENDIF_KEY_WORD\n", yytext);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 140 "lex.l"
{printf("(%s) - #ERROR_KEY_WORD\n", yytext);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 141 "lex.l"
{printf("(%s) - #FILEID_KEY_WORD\n", yytext);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 142 "lex.l"
{printf("(%s) - #FILELITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 143 "lex.l"
{printf("(%s) - #FILEPATH_KEY_WORD\n", yytext);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 144 "lex.l"
{printf("(%s) - #FILE_KEY_WORD\n", yytext);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 145 "lex.l"
{printf("(%s) - #FUNCTION_KEY_WORD\n", yytext);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 146 "lex.l"
{printf("(%s) - #IF_WORD\n", yytext);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 147 "lex.l"
{printf("(%s) - #IMAGELITERAL_KEY_WORD\n", yytext);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 148 "lex.l"
{printf("(%s) - #KEYPATH_KEY_WORD\n", yytext);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 149 "lex.l"
{printf("(%s) - #LINE_KEY_WORD\n", yytext);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 150 "lex.l"
{printf("(%s) - #SELECTOR_KEY_WORD\n", yytext);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 151 "lex.l"
{printf("(%s) - #SOURCELOCATION_KEY_WORD\n", yytext);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 152 "lex.l"
{printf("(%s) - #WARNING_KEY_WORD\n", yytext);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 155 "lex.l"
{ printf("Found OPERATOR_PLUS: %s\n", yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 156 "lex.l"
{ printf("Found OPERATOR_MINUS: %s\n", yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 157 "lex.l"
{ printf("Found OPERATOR_DIVISION: %s\n", yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 158 "lex.l"
{ printf("Found OPERATOR_MULTIPLICATION: %s\n", yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 159 "lex.l"
{ printf("Found OPERATOR_MODULUS: %s\n", yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 162 "lex.l"
{ printf("Found OPERATOR_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 163 "lex.l"
{ printf("Found OPERATOR_PLUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 164 "lex.l"
{ printf("Found OPERATOR_MINUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 165 "lex.l"
{ printf("Found OPERATOR_DIVIDE_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 166 "lex.l"
{ printf("Found OPERATOR_MUTIPLY_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 167 "lex.l"
{ printf("Found OPERATOR_MODULUS_ASSIGNMENT: %s\n", yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 170 "lex.l"
{ printf("Found OPERATOR_LEFT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 171 "lex.l"
{ printf("Found OPERATOR_RIGHT_SHIFT: %s\n", yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 172 "lex.l"
{ printf("Found OPERATOR_BINARY_AND: %s\n", yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 173 "lex.l"
{ printf("Found OPERATOR_BINARY_OR: %s\n", yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 174 "lex.l"
{ printf("Found OPERATOR_BINARY_XOR: %s\n", yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 175 "lex.l"
{ printf("Found OPERATOR_TILDE: %s\n", yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 178 "lex.l"
{ printf("Found OPERATOR_LESS: %s\n", yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 179 "lex.l"
{ printf("Found OPERATOR_GREATER: %s\n", yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 180 "lex.l"
{ printf("Found OPERATOR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 181 "lex.l"
{ printf("Found OPERATOR_LESS_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 182 "lex.l"
{ printf("Found OPERATOR_GREATER_OR_EQUAL: %s\n", yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 183 "lex.l"
{ printf("Found OPERATOR_NOT_EQUAL: %s\n", yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "lex.l"
{ printf("Found OPERATOR_LOGICAL_AND: %s\n", yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "lex.l"
{ printf("Found OPERATOR_LOGICAL_OR: %s\n", yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "lex.l"
{ printf("Found OPERATOR_LOGICAL_NOT: %s\n", yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "lex.l"
{ printf("Found OPERATOR_NIL_COALESCING: %s\n", yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 192 "lex.l"
{ printf("Found OPERATOR_INCREMENT: %s\n", yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 193 "lex.l"
{ printf("Found OPERATOR_DECREMENT: %s\n", yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 196 "lex.l"
{ printf("Found OPERATOR_POINT: %s\n", yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 197 "lex.l"
{ printf("Found OPERATOR_COMMA: %s\n", yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 198 "lex.l"
{ printf("Found OPERATOR_CLOSED_RANGE: %s\n", yytext); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 199 "lex.l"
{ printf("Found OPERATOR_HALF_OPEN_RANGE: %s\n", yytext); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 201 "lex.l"
{ printf("Fount TERNARY_OPERATOR_TRUE: %s\n", yytext);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 202 "lex.l"
{ printf("Found OPERATOR_COLON: %s\n", yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 203 "lex.l"
{ printf("Fount OPERATOR_RETURN_VALUE: %s\n", yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 205 "lex.l"
{ printf("Found LEFT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 206 "lex.l"
{ printf("Found RIGHT_ROUND_BRACKET: %s\n", yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 207 "lex.l"
{ printf("Found LEFT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 208 "lex.l"
{ printf("Found RIGHT_SQUARE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 209 "lex.l"
{ printf("Found LEFT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 210 "lex.l"
{ printf("Found RIGHT_FIGURE_BRACKET: %s\n", yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 212 "lex.l"
{ printf("Found TYPE_BOOL: %s\n", yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 213 "lex.l"
{ printf("Found TYPE_STRING: %s\n", yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 214 "lex.l"
{ printf("Found TYPE_CHARACTER: %s\n", yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 215 "lex.l"
{ printf("Found TYPE_INT8: %s\n", yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 216 "lex.l"
{ printf("Found TYPE_INT16: %s\n", yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 217 "lex.l"
{ printf("Found TYPE_INT32: %s\n", yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 218 "lex.l"
{ printf("Found TYPE_INT64: %s\n", yytext); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 219 "lex.l"
{ printf("Found TYPE_INT: %s\n", yytext); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 220 "lex.l"
{ printf("Found TYPE_UINT8: %s\n", yytext); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 221 "lex.l"
{ printf("Found TYPE_UINT16: %s\n", yytext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 222 "lex.l"
{ printf("Found TYPE_UINT32: %s\n", yytext); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 223 "lex.l"
{ printf("Found TYPE_UINT64: %s\n", yytext); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 224 "lex.l"
{ printf("Found TYPE_UINT: %s\n", yytext); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 225 "lex.l"
{ printf("Found TYPE_FLOAT: %s\n", yytext); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 226 "lex.l"
{ printf("Found TYPE_FLOAT80: %s\n", yytext); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 227 "lex.l"
{ printf("Found TYPE_DOUBLE: %s\n", yytext); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 229 "lex.l"
{strcpy(str, "/*"); multilineNumberBegin = lineNumber; BEGIN(MULTILINE_COMMENT);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 230 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 231 "lex.l"
{ strcat(str, yytext); lineNumber++; }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 232 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 233 "lex.l"
{ strcat(str, "*/"); printf("Found MULTILINE_COMMENT: %s\n", str); BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(MULTILINE_COMMENT):
#line 234 "lex.l"
{ printf("MULTILINE_COMMENT ERROR in line %d: comment are not closed\n", multilineNumberBegin); BEGIN(INITIAL); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 236 "lex.l"
{ printf("Found ONELINE_COMMENT: %s\n", yytext); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 238 "lex.l"
{ strcpy(str, ""); multilineNumberBegin = lineNumber; BEGIN(MULTILINE_STRING); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 239 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 240 "lex.l"
{ strcat(str, yytext); lineNumber++; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 241 "lex.l"
{ strcat(str, "\\"); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 242 "lex.l"
{ strcat(str, "\""); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 243 "lex.l"
{ strcat(str, "\'"); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 244 "lex.l"
{ strcat(str, "\"\""); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 245 "lex.l"
{ strcat(str, "\"\"\""); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 246 "lex.l"
{ strcat(str, "\"\"\""); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 247 "lex.l"
{ strcat(str, yytext); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 248 "lex.l"
{ printf("Found MULTILINE_STRING: %s\n", str); BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(MULTILINE_STRING):
#line 249 "lex.l"
{ printf("MULTILINE_STRING ERROR in line %d: multiline string are not closed\n", multilineNumberBegin); BEGIN(INITIAL); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 252 "lex.l"
{ stdstr = ""; BEGIN(STRING); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 253 "lex.l"
{ stdstr += yytext; }
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 254 "lex.l"
{ printf("STRING ERROR in line %d: unterminated string literal\n", lineNumber++); BEGIN(ERROR_ONELINE_STRING); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 255 "lex.l"
{ stdstr += "\n"; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 256 "lex.l"
{ stdstr += "\b"; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 257 "lex.l"
{ stdstr += "\0"; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 258 "lex.l"
{ stdstr += "\\"; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 259 "lex.l"
{ stdstr += "\f"; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 260 "lex.l"
{ stdstr += "\r"; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 261 "lex.l"
{ stdstr += "\t"; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 262 "lex.l"
{ stdstr += "\v"; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 263 "lex.l"
{ stdstr += "\'"; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 264 "lex.l"
{ stdstr += "\""; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 265 "lex.l"
{ printf("STRING ERROR in line %d: unterminated string literal\n", lineNumber); BEGIN(INITIAL); }
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 266 "lex.l"
{ lineNumber++; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 267 "lex.l"
{
    char *a;
    int x = strtol(yytext + 3, &a, 16);
        char buf[2];
        buf[0] = x;
        buf[1] = 0;
		stdstr += buf;
 } 
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 275 "lex.l"
{ std::cout << "STRING: " << stdstr << std::endl; BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 276 "lex.l"
{ printf("Error in %d:  no closing quotation mark\n", lineNumber); BEGIN(INITIAL); }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 278 "lex.l"
{
	removeChar(yytext, str, '_');
	printf("DECIMAL_NUMBER: %d\n", atoi(str));
}
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 283 "lex.l"
{ printf("BIN_NUMBER ERROR in line %d: is not a valid binary digit (0-1) in integer literal: %s\n", lineNumber, yytext); }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 284 "lex.l"
{ printf("BIN_NUMBER ERROR in line %d: is not a valid binary digit (0-1) in integer literal: %s\n", lineNumber, yytext); }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 286 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("BIN_NUMBER: %d\n", strtol(str + 2, NULL, 2));
    }
    else
    {
       printf("Error: incorrect format for DECIMAL_NUMBER\n");
    }
}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 299 "lex.l"
{ printf("OCT_NUMBER ERROR in line %d: is not a valid octal digit (0-7) in integer literal: %s\n", lineNumber, yytext); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 300 "lex.l"
{ printf("OCT_NUMBER ERROR in line %d: is not a valid octal digit (0-7) in integer literal: %s\n", lineNumber, yytext); }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 302 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("OCTAL_NUMBER: %d\n", strtol(str + 2, NULL, 8));
    }
    else
    {
        printf("Error: incorrect format for OCTAL_NUMBER\n");
    }
}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 315 "lex.l"
{ printf("HEX_NUMBER ERROR in line %d: is not a valid hexadecimal digit (0-9, A-F) in integer literal: %s\n", lineNumber, yytext); }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 316 "lex.l"
{ printf("HEX_NUMBER ERROR in line %d: is not a valid hexadecimal digit (0-9, A-F) in integer literal: %s\n", lineNumber, yytext); }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 318 "lex.l"
{

    if(strlen(yytext) > 2)
    {
		removeChar(yytext, str, '_');
        printf("HEXADEMICAL_NUMBER: %d\n", strtol(str + 2, NULL, 16));
    }
    else
    {
        printf("Error: incorrect format for HEXADEMICAL_NUMBER\n");
    }
}
	YY_BREAK
case 206:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 331 "lex.l"
{ 
	removeChar(yytext, str, '_');
    printf("DECIMAL_FLOATINGPOINT_NUMBER: %f\n", atof(str));
}
	YY_BREAK
case 207:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 336 "lex.l"
{ 
	removeChar(yytext, str, '_');
    printf("HEXADECIMAL_FLOATINGPOINT_NUMBER: %f\n", atof(str));
}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 341 "lex.l"
{ printf("Found IDENTIFIER: %s\n", yytext); }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 342 "lex.l"
ECHO;
	YY_BREAK
#line 2412 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(ERROR_ONELINE_STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 715 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 715 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 714);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 342 "lex.l"


void convertCharacterCodeToString(char charCode[], int pos, char *str)
{
    str[0] = strtol(charCode + pos, NULL, 16);
    str[1] = '\0';
}

void removeChar(const char * str, char * dest, char deletedChar) 
{
    int j = 0;

    for (int i = 0; i < strlen(yytext); i++) {
        if (str[i] != deletedChar) {
            dest[j++] = str[i];
        }
    }

    dest[j] = '\0';
}

int main( int argc, char** argv)
{
    if (argc == 2)
    {
        FILE *file = fopen(argv[1], "r");
        if (file == NULL) 
        {
            printf("File opening error");
            return 1;
        }
        yyin = file;
        yylex();
        fclose(file);
        return 0;
    }
    else
    {
        printf("missed commandline argument");
        return 1;
    }
}
